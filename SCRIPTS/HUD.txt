var U = import Utilities

func printRight(lNum, color, message, minSize)
  message = message + ""
  var xRight = 87
  var mSize = string.Size(message)
  ?minSize > mSize
    mSize = minSize
  var xStart = xRight - mSize
  >`@xStart@,@lNum@,@color@,@message@
  
func printCooldown(x, y, twoChar, key)
  var color = "#FF00FF"
  ?item.GetCooldown(key) > 0
    color = "#FF00FF"
  :
    color = "#440044"
  
  >`@x@,@y@,@color@,@twoChar@ @U.toSeconds(item.GetCooldown(key))@
  

func shortenBuffString(buffStr)
  var buffDisplayString = ""
  var buffParts = string.Split(buffStr, ":")
  ?Type(buffParts) = Type([]) & buffParts.Count() = 4
    var buffName = buffParts[1]
    var nameParts = string.split(buffName, "_")
    var shortName = ""
    for namePart : nameParts
      ?string.Equals(namePart, "debuff")
        shortName = shortName + "d."
      :?string.Equals(namePart, "duration")
        shortName = shortName + "dur."
      :?string.Equals(namePart, "damage")
        shortName = shortName + "dmg."
      :
        shortName = shortName + namePart + "."
    buffDisplayString = string.Sub(shortName, 0, string.Size(shortName) - 1)
  return buffDisplayString
  
func parseBuffString(buffString)
  var fullDisplayString = false
  var buffStrings = string.split(buffString, ",")
  var buffDisplayString = true
  var buffParts = []
  for buffStr : buffStrings
    buffDisplayString = true
    buffParts = string.Split(buffStr, ":")
    ?Type(buffParts) = Type([]) & buffParts.Count() = 4
      var buffName = buffParts[1]
      var nameParts = string.split(buffName, "_")
      for namePart : nameParts
        ?buffDisplayString ! false
          ?string.Equals(namePart, "quarterstaff")
            buffDisplayString = false
          :?string.Equals(namePart, "bardiche")
            buffDisplayString = false
          :?string.Equals(namePart, "debuff")
            buffDisplayString = "DmgDown"
          :?string.Equals(namePart, "buff")
            buffDisplayString = "DmgBuff"
          :?string.Equals(namePart, "duration")
            buffDisplayString = "DmgDown"
          :?string.Equals(namePart, "dot")
            buffDisplayString = "DoT"
          :?string.Equals(namePart, "chill")
            buffDisplayString = "Chill"
          :?string.Equals(namePart, "fatigue")
            buffDisplayString = "ArmDown"
          :?string.Equals(namePart, "feeble")
            buffDisplayString = "Feeble"
          :?string.Equals(namePart, "smite")
            buffDisplayString = "Smite"
          :?string.Equals(namePart, "stun")
            buffDisplayString = "Stun"
          :?string.Equals(namePart, "ignition")
            buffDisplayString = "Ignite"
      ?buffDisplayString ! false
        ?buffDisplayString = true
          buffDisplayString = shortenBuffString(buffStr) + " (" + buffStr + ")"
        ?buffParts[2]
          buffDisplayString = buffDisplayString + " x" + buffParts[2]
        ?buffParts[3]
          buffDisplayString = buffDisplayString + ":" + U.toSeconds(int.Parse(buffParts[3]))
        ?fullDisplayString
          fullDisplayString = string.Join(",", [fullDisplayString, buffDisplayString])
        :
          fullDisplayString = buffDisplayString
  ?fullDisplayString = false
    return ""
  return fullDisplayString

func Display()
  // === HUD Info Display ===
  var xStart = 0
  var yStart = 6
  var lineNum = yStart
  
  ?U.Get("errorMessage")
    >`25,0,#FF0000,@U.Get("errorMessage")@

  ?U.Get("hideHUD")
    printRight(0,"#FF0000","[Z] HUD", 0)
    return
    
  >`@xStart@,@lineNum@,#00FF00,Location: @loc.name@ @loc.stars@*
  lineNum++
  ?pickup.distance < 9999
    >`@xStart@,@lineNum@,#00FF00,Pickup: @pickup@ (@pickup.distance@)
    lineNum++
  ?harvest.distance < 9999
    >`@xStart@,@lineNum@,#00FF00,Harvest: @harvest@ (@harvest.distance@)
    lineNum++
  
  ?foe.damage > -1
    lineNum = U.displayFoe(lineNum, xStart)
    >`@xStart@,@lineNum@,#DD0000,Lv@foe.level@ ..@foe.distance@, Dmg: @foe.damage@, State: @foe.state@:@U.toSeconds(foe.time)@
    lineNum++
    >`@xStart@,@lineNum@,#DD0000,+ @parseBuffString(foe.buffs.string)@
    lineNum++
    >`@xStart@,@lineNum@,#009900,- @parseBuffString(foe.debuffs.string)@
    lineNum++
  
  lineNum++
  >`@xStart@,@lineNum@,#00FF00,+ @parseBuffString(buffs.string)@
  lineNum++
  >`@xStart@,@lineNum@,#FF0000,- @parseBuffString(debuffs.string)@
  
  lineNum = 23
  xStart = 2
   
  printCooldown(xStart, lineNum, ">Q", "quarterstaff")
  printCooldown(xStart + 6, lineNum, "<<", "mind")
  printCooldown(xStart + 14, lineNum, ">>", "bash")
  lineNum++
  
  printCooldown(xStart, lineNum, "BG", "blade")
  printCooldown(xStart + 6, lineNum, " M", "mask")
  printCooldown(xStart + 14, lineNum, " H", "hammer")
  lineNum++
  
  printCooldown(xStart, lineNum, "Sk", "skeleton_arm")
  printCooldown(xStart + 6, lineNum, " B", "bardiche")
  printCooldown(xStart + 14, lineNum, " T", "fire_talisman")
  lineNum++
  
  var rightYStart = 0
  var rightLineNum = rightYStart
 
  printRight(rightLineNum,"#00FF00","[Z] HUD", 16)
  rightLineNum++

  ?U.Get("staffSpeed")
    printRight(rightLineNum,"#00FF00","[S] Speed", 16)
    rightLineNum++
  :
    printRight(rightLineNum,"#FF0000","[S] Speed", 16)
    rightLineNum++

  ?U.Get("skeletonArm")
    printRight(rightLineNum,"#00FF00","[A] Skeleton Arm", 16)
    rightLineNum++
  :
    printRight(rightLineNum,"#FF0000","[A] Skeleton Arm", 16)
    rightLineNum++

  ?U.Get("isRangedBlocked")
    printRight(rightLineNum,"#00FF00","[C] Melee Only", 16)
    rightLineNum++
  :
    printRight(rightLineNum,"#FF0000","[C] Melee Only", 16)
    rightLineNum++

  rightLineNum++
  
  var oneHandedColor = #00FFFF

  ?U.Get("assignedBoth") ! false
    oneHandedColor = #999999
    printRight(rightLineNum, "#00FFFF", "[<>] " + U.Get("assignedBoth"), 27)
    printRight(rightLineNum + 1, "#00BBBB", U.Get("bothReason"), 25)
  :
    oneHandedColor = #00FFFF
  rightLineNum++
  rightLineNum++

  ?U.getCounterElement()
    printRight(rightLineNum, "#FF00FF", "Counter Element: " + String.Capitalize(U.getCounterElement()), 23)
  rightLineNum++

  ?U.Get("assignedLeft") ! false
    printRight(rightLineNum, oneHandedColor, "[ >] " + U.Get("assignedLeft"), 27)
    printRight(rightLineNum + 1, oneHandedColor, U.Get("leftReason"), 25)
  rightLineNum++
  rightLineNum++

  ?U.Get("assignedRight") ! false
    printRight(rightLineNum, oneHandedColor, "[< ] " + U.Get("assignedRight"), 27)
    printRight(rightLineNum + 1, oneHandedColor, U.Get("rightReason"), 25)
  rightLineNum++
  rightLineNum++
  
  ?U.Get("isActivating")
    printRight(rightLineNum, "#FF00FF", "ACTIVATING: [" + U.Get("isActivating") + "]", 15)
  rightLineNum++      
      
  rightLineNum = 24
  printRight(rightLineNum, "#FF00FF", "I: " + screen.i + ", X: " + screen.x, 0)
  rightLineNum++
  
  var aiColor = #CC0000
  var idleColor = #CC0000
  var pausedColor = #CC0000
  var walkColor = #CC0000
  var faceColor = #FF00FF
  
  ?ai.enabled
    aiColor = #00FF00
  :
    aiColor = #CC0000
  ?ai.idle
    idleColor = #00FF00
  :
    idleColor = #CC0000
  ?ai.paused
    pausedColor = #00FF00
  :
    pausedColor = #CC0000
  ?ai.walking
    walkColor = #00FF00
  :
    walkColor = #CC0000
  
  var xStartPushed = 59 // xStart + 10
  >`@xStartPushed@,@rightLineNum@,@aiColor@,[AI]
  >`@xStartPushed + 5@,@rightLineNum@,@idleColor@,[Idle]
  >`@xStartPushed + 12@,@rightLineNum@,@pausedColor@,[Paused]
  >`@xStartPushed + 21@,@rightLineNum@,@walkColor@,[Walk]
  
  lineNum = yStart
  rightLineNum = rightYStart

import Pets
