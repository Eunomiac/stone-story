var U = import Utilities

var timeStringColors = ["#00FF00", "#FFFF00", "#FF0000"]

func printRight(lNum, color, message, minSize)
  message = message + ""
  var xRight = 87
  var mSize = string.Size(message)
  ?minSize > mSize
    mSize = minSize
  var xStart = xRight - mSize
  >`@xStart@,@lNum@,@color@,@message@
  
func printCooldown(x, y, twoChar, key)
  var color = "#FF00FF"
  ?item.GetCooldown(key) > 0
    color = "#FF00FF"
  :
    color = "#440044"
  
  >`@x@,@y@,@color@,@twoChar@ @U.toSeconds(item.GetCooldown(key))@
  
func shortenBuffString(buffStr)
  var buffDisplayString = ""
  var buffParts = string.Split(buffStr, ":")
  ?Type(buffParts) = Type([]) & buffParts.Count() = 4
    var buffName = buffParts[1]
    var nameParts = string.split(buffName, "_")
    var shortName = ""
    for namePart : nameParts
      ?string.Equals(namePart, "debuff")
        shortName = shortName + "d."
      :?string.Equals(namePart, "duration")
        shortName = shortName + "dur."
      :?string.Equals(namePart, "damage")
        shortName = shortName + "dmg."
      :
        shortName = shortName + namePart + "."
    buffDisplayString = string.Sub(shortName, 0, string.Size(shortName) - 1)
  return buffDisplayString
  
func parseBuffString(buffString)
  var fullDisplayString = false
  var buffStrings = string.split(buffString, ",")
  var buffDisplayString = true
  var buffParts = []
  for buffStr : buffStrings
    buffDisplayString = true
    buffParts = string.Split(buffStr, ":")
    ?Type(buffParts) = Type([]) & buffParts.Count() = 4
      var buffName = buffParts[1]
      var nameParts = string.split(buffName, "_")
      for namePart : nameParts
        ?buffDisplayString ! false
          ?string.Equals(namePart, "quarterstaff")
            buffDisplayString = false
          :?string.Equals(namePart, "bardiche")
            buffDisplayString = false
          :?string.Equals(namePart, "debuff")
            buffDisplayString = "DmgDown"
          :?string.Equals(namePart, "pocket")
            buffDisplayString = "P-Pocket"
          :?string.Equals(namePart, "berserk")
            buffDisplayString = "Berserk"
          :?string.Equals(namePart, "vampiric")
            buffDisplayString = "Vamp"
          :?string.Equals(namePart, "lucky")
            buffDisplayString = "Lucky"
          :?string.Equals(namePart, "experience")
            buffDisplayString = "+XP"
          :?string.Equals(namePart, "strength")
            buffDisplayString = "Strength"
          :?string.Equals(namePart, "invisibility")
            buffDisplayString = "Invis"
          :?string.Equals(namePart, "buff")
            buffDisplayString = "DmgBuff"
          :?string.Equals(namePart, "duration")
            buffDisplayString = "DmgDown"
          :?string.Equals(namePart, "dot")
            buffDisplayString = "DoT"
          :?string.Equals(namePart, "chill")
            buffDisplayString = "Chill"
          :?string.Equals(namePart, "fatigue")
            buffDisplayString = "ArmDown"
          :?string.Equals(namePart, "feeble")
            buffDisplayString = "Feeble"
          :?string.Equals(namePart, "smite")
            buffDisplayString = "Smite"
          :?string.Equals(namePart, "stun")
            buffDisplayString = "Stun"
          :?string.Equals(namePart, "ignition")
            buffDisplayString = "Ignite"
          :?string.Equals(namePart, "poena")
            buffDisplayString = "REFLECT"
      ?buffDisplayString ! false
        ?buffDisplayString = true
          buffDisplayString = shortenBuffString(buffStr) + " (" + buffStr + ")"
        ?buffParts[2]
          buffDisplayString = buffDisplayString + " x" + buffParts[2]
        ?buffParts[3]
          buffDisplayString = buffDisplayString + ":" + U.toSeconds(int.Parse(buffParts[3]))
        ?fullDisplayString
          fullDisplayString = string.Join(",", [fullDisplayString, buffDisplayString])
        :
          fullDisplayString = buffDisplayString
  ?fullDisplayString = false
    return ""
  return fullDisplayString

func displayFoe(startLine, xStart)
  var foeName = foe.name
  var nameIndex = String.IndexOf(foe, foe.name)
  var nameLength = String.Size(foe.name)
  var foeSuffix = String.Sub(foe, nameIndex + nameLength)
  var foeKeywords = String.Split(foeSuffix, true)
  var numRows = Math.CeilToInt(foeKeywords.Count() / 2)
  >`@xStart@,@startLine@,#FF0000,Foe: @foeName@ (+@foe.count@)
  var xOffset = 10
  for i = 0 .. foeKeywords.Count()-1
    ?i % 4 = 0
      startLine++
      >`@xStart+2@,@startLine@,#CC0000,[@foeKeywords[i]@]
      xOffset = String.Size(foeKeywords[i])+3
    :
      >`@xStart+xOffset+2@,@startLine@,#FF0000,[@foeKeywords[i]@]
      xOffset = xOffset + String.Size(foeKeywords[i])+3
  startLine++
  return startLine
  
func getTimeColor(curTime, maxTime)
  var lerpMidpoint = 0.75
  var averageTimeFraction = 0.1
  var startColor = "" 
  var endColor = ""
  var midColor = ""
  averageTimeFraction = (1.0 * curTime) / maxTime
  
  ?averageTimeFraction < lerpMidpoint
    startColor = timeStringColors[0]
    endColor = timeStringColors[1]
    averageTimeFraction = averageTimeFraction / lerpMidpoint
    midColor = color.Lerp(startColor, endColor, averageTimeFraction)
  :
    startColor = timeStringColors[1]
    endColor = timeStringColors[2]
    averageTimeFraction = (averageTimeFraction - lerpMidpoint) / (1 - lerpMidpoint)
    midColor = color.Lerp(startColor, endColor, averageTimeFraction)
  return midColor
  
func displayTimeData(startLine)
  // printRight(rightLineNum, "#FF00FF", "I: " + screen.i + ", X: " + screen.x, 0)

  var mainStringColor = "#00FFFF"
  
  var averageTimeString = ""
  var averageTimeStringSize = 0
  var averageStringColor = timeStringColors[1]

  var bestTimeString = ""
  var bestStringColor = timeStringColors[1]
  
  ?loc.averageTime > 0
    averageTimeString = "(" + U.toPercent(totalTime, loc.averageTime) + " of " + time.FormatDigital(loc.averageTime) + ")"
    averageTimeStringSize = string.Size(averageTimeString)
    averageStringColor = getTimeColor(totalTime, loc.averageTime)
  ?loc.bestTime > 0
    bestTimeString = "(" + U.toPercent(totalTime, loc.bestTime) + " of " + time.FormatDigital(loc.bestTime) + ")"
    bestStringColor = getTimeColor(totalTime, loc.bestTime)
        
  printRight(startLine, mainStringColor, time.FormatDigital(totalTime), string.Size(time.FormatDigital(totalTime)) + averageTimeStringSize + 1)
  printRight(startLine, averageStringColor, averageTimeString, 0)
  printRight(startLine + 1, bestStringColor, bestTimeString, 0)

func Display()
  // === HUD Info Display ===
  var xStart = 0
  var yStart = 6
  var lineNum = yStart
  
  ?U.Get("errorMessage")
    >`25,0,#FF0000,@U.Get("errorMessage")@

  ?U.Get("hideHUD")
    printRight(0,"#FF0000","[Z] HUD", 0)
    return
    
  >`@xStart@,@lineNum@,#00FF00,Location: @loc.name@ @loc.stars@*
  lineNum++
  ?pickup.distance < 9999
    >`@xStart@,@lineNum@,#00FF00,Pickup: @pickup@ (@pickup.distance@)
    lineNum++
  ?harvest.distance < 9999
    >`@xStart@,@lineNum@,#00FF00,Harvest: @harvest@ (@harvest.distance@)
    lineNum++
  
  ?foe.damage > -1
    lineNum = displayFoe(lineNum, xStart)
    >`@xStart@,@lineNum@,#DD0000,Lv@foe.level@ ..@foe.distance@, Dmg: @foe.damage@, State: @foe.state@:@U.toSeconds(foe.time)@
    lineNum++
    >`@xStart@,@lineNum@,#DD0000,+ @parseBuffString(foe.buffs.string)@
    lineNum++
    >`@xStart@,@lineNum@,#009900,- @parseBuffString(foe.debuffs.string)@
    lineNum++
  
  lineNum++
  >`@xStart@,@lineNum@,#00FF00,+ @parseBuffString(buffs.string)@
  lineNum++
  >`@xStart@,@lineNum@,#FF0000,- @parseBuffString(debuffs.string)@
  
  lineNum = 23
  xStart = 2
   
  printCooldown(xStart, lineNum, ">Q", "quarterstaff")
  printCooldown(xStart + 6, lineNum, "<<", "mind")
  printCooldown(xStart + 14, lineNum, ">>", "bash")
  lineNum++
  
  printCooldown(xStart, lineNum, "BG", "blade")
  printCooldown(xStart + 6, lineNum, " M", "mask")
  printCooldown(xStart + 14, lineNum, " H", "hammer")
  lineNum++
  
  printCooldown(xStart, lineNum, "Sk", "skeleton_arm")
  printCooldown(xStart + 6, lineNum, " B", "bardiche")
  printCooldown(xStart + 14, lineNum, " T", "fire_talisman")
  lineNum++
  
  var rightYStart = 0
  var rightLineNum = rightYStart
 
  printRight(rightLineNum,"#00FF00","[Z] HUD", 15)
  
  ?U.Get("isForcingDash")
    printRight(rightLineNum,"#00FF00","[D]", 7)
  :
    printRight(rightLineNum,"#FF0000","[D]", 7)

  ?U.Get("isForcingBotFG")
    printRight(rightLineNum,"#00FF00","[W]", 3)
  :
    printRight(rightLineNum,"#FF0000","[W]", 3)  
  
  rightLineNum++

  ?U.Get("skeletonArm")
    printRight(rightLineNum,"#00FF00","[A] PP", 22)
  :
    printRight(rightLineNum,"#FF0000","[A] PP", 22)
  ?U.Get("staffSpeed")
    printRight(rightLineNum,"#00FF00","[S] Spd", 15)
  :
    printRight(rightLineNum,"#FF0000","[S] Spd", 15)
  ?U.Get("isRangedBlocked")
    printRight(rightLineNum,"#00FF00","[C] Mel", 0)
  :
    printRight(rightLineNum,"#FF0000","[C] Mel", 0)
    
  rightLineNum++
  rightLineNum++
  rightLineNum++
  
  var oneHandedColor = #00FFFF

  ?U.Get("assignedBoth") ! false
    oneHandedColor = #999999
    printRight(rightLineNum, "#00FFFF", "[<>] " + U.Get("assignedBoth"), 27)
    printRight(rightLineNum + 1, "#00BBBB", U.Get("bothReason"), 12)
  :
    oneHandedColor = #00FFFF
  rightLineNum++
  rightLineNum++

  ?U.getCounterElement()
    printRight(rightLineNum, "#FF00FF", "Counter Element: " + String.Capitalize(U.getCounterElement()), 23)
  rightLineNum++

  ?U.Get("assignedLeft") ! false
    printRight(rightLineNum, oneHandedColor, "[ >] " + U.Get("assignedLeft"), 27)
    printRight(rightLineNum + 1, oneHandedColor, U.Get("leftReason"), 12)
  rightLineNum++
  rightLineNum++

  ?U.Get("assignedRight") ! false
    printRight(rightLineNum, oneHandedColor, "[< ] " + U.Get("assignedRight"), 27)
    printRight(rightLineNum + 1, oneHandedColor, U.Get("rightReason"), 12)
  rightLineNum++
  rightLineNum++
  
  ?U.Get("isActivating")
    printRight(rightLineNum, "#FF00FF", "ACTIVATING: [" + U.Get("isActivating") + "]", 15)
    
  displayTimeData(24)
  
  lineNum = yStart
  rightLineNum = rightYStart

import Pets
