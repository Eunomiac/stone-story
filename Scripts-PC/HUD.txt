var U = import Utilities

var timeStringColors = ["#00FF00", "#FFFF00", "#FF0000"]

// OK SYMBOLS: →↓∆∞≈│║▀█░▒▓▲▼○☼♀♂♠♣♥♦♪♫¦§©«®°²³¶¹»¼½¾×Ø÷øʘΘΔψДФХфЖжд‖†‡•⁞±¤…ΦГ ‒ – — ―≠
// BAD SYMBOLS: ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ▬◊●♡⸨⸩⸿⸫⸪⸬ǁǂȸȹɅɸΓΞϴ҈֎א٭۝۞۩۷۸ฒณᴀᴄᴅᴁᴬᴱᴰᴪᵃᵉᵜ‣※‼‽⁂⁃⁅⁆⁋⁐⁎⁑⁒⁓⁕⁖⁘⁙⁚⁛⁜⁝₁₂₃ₐₑ⁴⁵⁶₊₍₎ℨℾℿ⸿⸫⸬⸭⸪Ψ‐Ɐ↕↨↔√⌂
// Element Symbols: ∞φ❄*♥


func printRight(lNum, color, message, minSize)
  message = message + ""
  var mSize = string.Size(message)
  ?minSize > mSize
    mSize = minSize
  var xStart = screen.w - mSize
  >`@xStart@,@lNum@,@color@,@message@
  
func printCooldown(x, y, twoChar, key)
  var color = "#FF00FF"
  ?item.GetCooldown(key) > 0
    color = "#FF00FF"
  :
    color = "#440044"
  
  >`@x@,@y@,@color@,@twoChar@ @U.toSeconds(item.GetCooldown(key))@
  
func displayControls(lNum)
  ?U.Get("isForcingDash")
    printRight(lNum,"#00FF00","[D]", 7)
  :
    printRight(lNum,"#FF0000","[D]", 7)
  
  ?U.Get("isForcingBotFG")
    printRight(lNum,"#00FF00","[W]", 3)
  :
    printRight(lNum,"#FF0000","[W]", 3)  
  
  lNum++
  
  ?U.Get("skeletonArm")
    printRight(lNum,"#00FF00","[A] PP", 22)
  :
    printRight(lNum,"#FF0000","[A] PP", 22)
  ?U.Get("staffSpeed")
    printRight(lNum,"#00FF00","[S] Spd", 15)
  :
    printRight(lNum,"#FF0000","[S] Spd", 15)
  ?U.Get("preferMelee")
    printRight(lNum,"#00FF00","[C] Mel", 0)
  :
    printRight(lNum,"#FF0000","[C] Mel", 0)
  
  lNum++
  lNum++
  lNum++
  
  return lNum
  

func displayShiftControls(lNum)
  // ?U.Get("isForcingDash")
  //   printRight(lNum,"#00FF00","[D]", 7)
  // :
  //   printRight(lNum,"#FF0000","[D]", 7)
  
  // ?U.Get("isForcingBotFG")
  //   printRight(lNum,"#00FF00","[W]", 3)
  // :
  //   printRight(lNum,"#FF0000","[W]", 3)  
  
  lNum++
  
  // ?U.Get("skeletonArm")
  //   printRight(lNum,"#00FF00","[A] PP", 22)
  // :
  //   printRight(lNum,"#FF0000","[A] PP", 22)
  ?U.Get("isSpeedRunning")
    printRight(lNum,"#00FF00","[S] Run", 15)
  :
    printRight(lNum,"#FF0000","[S] Run", 15)
  // ?U.Get("preferMelee")
  //   printRight(lNum,"#00FF00","[C] Mel", 0)
  // :
  //   printRight(lNum,"#FF0000","[C] Mel", 0)
  
  lNum++
  lNum++
  lNum++
  
  return lNum
  

func displayCtrlControls(lNum)
  // ?U.Get("isForcingDash")
  //   printRight(lNum,"#00FF00","[D]", 7)
  // :
  //   printRight(lNum,"#FF0000","[D]", 7)
  // 
  // ?U.Get("isForcingBotFG")
  //   printRight(lNum,"#00FF00","[W]", 3)
  // :
  //   printRight(lNum,"#FF0000","[W]", 3)  
  // 
  lNum++
  // 
  // ?U.Get("skeletonArm")
  //   printRight(lNum,"#00FF00","[A] PP", 22)
  // :
  //   printRight(lNum,"#FF0000","[A] PP", 22)
  // ?U.Get("staffSpeed")
  //   printRight(lNum,"#00FF00","[S] Spd", 15)
  // :
  //   printRight(lNum,"#FF0000","[S] Spd", 15)
  // ?U.Get("preferMelee")
  //   printRight(lNum,"#00FF00","[C] Mel", 0)
  // :
  //   printRight(lNum,"#FF0000","[C] Mel", 0)
  
  lNum++
  lNum++
  lNum++
  
  return lNum  

func shortenBuffString(buffStr)
  var buffDisplayString = ""
  var buffParts = string.Split(buffStr, ":")
  ?Type(buffParts) = Type([]) & buffParts.Count() = 4
    var buffName = buffParts[1]
    var nameParts = string.split(buffName, "_")
    var shortName = ""
    for namePart : nameParts
      ?string.Equals(namePart, "debuff")
        shortName = shortName + "d."
      :?string.Equals(namePart, "duration")
        shortName = shortName + "dur."
      :?string.Equals(namePart, "damage")
        shortName = shortName + "dmg."
      :
        shortName = shortName + namePart + "."
    buffDisplayString = string.Sub(shortName, 0, string.Size(shortName) - 1)
  return buffDisplayString
  
func parseBuffString(buffString)
  var fullDisplayString = false
  var buffStrings = string.split(buffString, ",")
  var buffDisplayString = true
  var buffParts = []
  for buffStr : buffStrings
    buffDisplayString = true
    buffParts = string.Split(buffStr, ":")
    ?Type(buffParts) = Type([]) & buffParts.Count() = 4
      var buffName = buffParts[1]
      ?replaceKeywordKeys.Contains(buffName)
        buffDisplayString = replaceKeywordVals[replaceKeywordKeys.IndexOf(buffName)]
      :
        var nameParts = string.split(buffName, "_")
        for namePart : nameParts
          // →↓∆∞≈│║▀█░▒▓▲▼○☼♀♂♠♣♥♦♪♫¦§©«®°²³¶¹»¼½¾×Ø÷øʘΘΔψДФХфЖжд‖†‡•⁞±¤…ΦГ ‒ – — ―≠
          ?buffDisplayString ! false
            ?string.Equals(namePart, "quarterstaff")
              buffDisplayString = false
            :?string.Equals(namePart, "bardiche")
              buffDisplayString = false
            :?string.Equals(namePart, "debuff")
              buffDisplayString = "DmgDown"
            :?string.Equals(namePart, "pocket")
              buffDisplayString = "P-Pocket"
            :?string.Equals(namePart, "berserk")
              buffDisplayString = "Berserk"
            :?string.Equals(namePart, "vampiric")
              buffDisplayString = "Vamp"
            :?string.Equals(namePart, "lucky")
              buffDisplayString = "Lucky"
            :?string.Equals(namePart, "experience")
              buffDisplayString = "+XP"
            :?string.Equals(namePart, "strength")
              buffDisplayString = "Strength"
            :?string.Equals(namePart, "invisibility")
              buffDisplayString = "Invis"
            :?string.Equals(namePart, "buff")
              buffDisplayString = "DmgBuff"
            :?string.Equals(namePart, "duration")
              buffDisplayString = "DmgDown"
            :?string.Equals(namePart, "dot")
              buffDisplayString = "DoT"
            :?string.Equals(namePart, "chill")
              buffDisplayString = "Chill"
            :?string.Equals(namePart, "fatigue")
              buffDisplayString = "ArmDown"
            :?string.Equals(namePart, "feeble")
              buffDisplayString = "Feeble"
            :?string.Equals(namePart, "smite")
              buffDisplayString = "Smite"
            :?string.Equals(namePart, "stun")
              buffDisplayString = "Stun"
            :?string.Equals(namePart, "ignition")
              buffDisplayString = "Ignite"
            :?string.Equals(namePart, "poena")
              buffDisplayString = "REFLECT"
      ?buffDisplayString ! false
        ?buffDisplayString = true
          buffDisplayString = shortenBuffString(buffStr) + " (" + buffStr + ")"
        ?buffParts[2]
          buffDisplayString = buffDisplayString + " x" + buffParts[2]
        ?buffParts[3]
          buffDisplayString = buffDisplayString + ":" + U.toSeconds(int.Parse(buffParts[3]))
        ?fullDisplayString
          fullDisplayString = string.Join(",", [fullDisplayString, buffDisplayString])
        :
          fullDisplayString = buffDisplayString
  ?fullDisplayString = false
    return ""
  return fullDisplayString
  
>`0,4,#00FFFF,→↓∆∞≈│║▀█░▒▓▲▼○☼♀♂♠♣♥♦♪♫¦§©«®°²³¶¹»¼½¾
>`0,5,#00FFFF,×Ø÷øʘΘΔψДФХфЖжд‖†‡•⁞±¤…ΦГ ‒ – — ―≠
  
var ignoreKeywords = [
^  "machine", "humanoid", "slow", "elemental", "insect", "arachnid",
^  "unpushable", "boss", "serpent", "cult",
^  "melee"
^]

var elementKeywords = ["poison", "fire", "ice", "aether", "vigor"]
var elementSymbols = ["∞", "φ", "❄", "*", "♥"]
var elementColors = ["#009900", "#FF7700", "#00FFFF", "#990099", "#FFAAAA"]

var replaceKeywordKeys = [
^  "phase1", "phase2", "phase3",
^  "explode", "ranged",
^  "immune_to_stun", "immune_to_debuff_chill", "immune_to_debuff_damage",
^  "immune_to_physical", "immune_to_poison", "immune_to_fire", "immune_to_ice", "immune_to_aether", "immune_to_vigor",
^  "magic_resist", "magic_vulnerability",
^  "adaptive_defense_poison", "adaptive_defense_fire", "adaptive_defense_ice", "adaptive_defense_aether", "adaptive_defense_vigor"
^]
var replaceKeywordVals = [
^  "¶¹", "¶²", "¶³",
^  "Ж", "«{",
^  "║¤↓║", "║❄↓║", "║∞↓║",
^  "║P║", "║∞║", "║φ║", "║❄║", "║*║", "║♥║",
^  "¦M¦", ">M<",
^  "⁞∞⁞", "⁞φ⁞", "⁞❄⁞", "⁞*⁞", "⁞♥⁞"
^]
var coloredKeywordColors = [
^  color.Lerp("#FFDD00", "#000000", 0.5), color.Lerp("#FFDD00", "#000000", 0.25), "#FFDD00",
^  "#FF0000", "#FFFF00",
^  "#FFFFFF", "#CCCCFF", "#007700",
^  "#FF0000", "#009900", "#FF7700", "#00FFFF", "#990099", "#FFAAAA",
^  "#9900FF", "#AA66FF",
^  "#009900", "#FF7700", "#00FFFF", "#990099", "#FFAAAA" 
^]

func displayColoredStrings(lineNum, strings, colors, xStart, isTight)
  var xPos = xStart
  var thisColor
  var thisString
  var thisLength
  for i = 0..(strings.Count() - 1)
    thisColor = colors[i]
    thisString = strings[i] + ""
    thisLength = string.Size(thisString)
    ?!isTight
      thisLength++
    >`@xPos@,@lineNum@,@thisColor@,@thisString@
    xPos += thisLength
    
func getDistanceStrings()
  ?U.isFarAs("screen")
    return ["     ", ""]
  :?U.isCloseAs("melee")
    return ["█████","█████"]
  :?U.isWithin("ranged", "screen")
    return ["█▒░░░","░░░▒█"]
  :?U.isWithin("medium", "ranged")
    return ["██▒░░","░░▒██"]
  :?U.isWithin("close", "medium")
    return ["███▒░","░▒███"]
  :?U.isWithin("melee", "close")
    return ["████▒","▒████"]
    
func getDistanceColor()
  ?U.isFarAs("screen")
    return "#000000"
  :?U.isCloseAs("melee")
    return "#FF0000"
  :?U.isWithin("ranged", "screen")
    return "#000099"
  :?U.isWithin("medium", "ranged")
    return "#990099"
  :?U.isWithin("close", "medium")
    return "#999900"
  :?U.isWithin("melee", "close")
    return "#FF9900"


func displayFoe(startLine, xStart)
  var foeName = string.ToUpper(foe.name)
  var nameIndex = String.IndexOf(foe, foe.name)
  var nameLength = String.Size(foe.name)
  var foeSuffix = String.Sub(foe, nameIndex + nameLength)
  var foeKeywords = String.Split(foeSuffix, true)
  var numRows = Math.CeilToInt(foeKeywords.Count() / 2)
  var distanceStrings = getDistanceStrings()
  var distanceColor = getDistanceColor()
  ?Type(distanceStrings) = Type([])
    displayColoredStrings(startLine, [
    ^   distanceStrings[0],
    ^   foeName,
    ^   distanceStrings[1]
    ^ ], [
    ^   color.Lerp("#000000",distanceColor,0.5),
    ^   distanceColor,
    ^   color.Lerp("#000000",distanceColor,0.5)
    ^ ],
    ^ xStart,
    ^ true
    ^)
  var xOffset = 0
  xOffset = 0
  var keywordPalette = ["#990000", "#770000", "#333333"]
  var paletteIndex
  paletteIndex = 0
  var keywordStrings = []
  keywordStrings.Clear()
  var keywordColors = []
  keywordColors.Clear()
  var keyword
  var parsedKeyword
  var thisColorString
  for i = 0 .. foeKeywords.Count()-1
    keyword = string.ToLower(foeKeywords[i])
    parsedKeyword = keyword
    ?!ignoreKeywords.Contains(keyword)
      ?replaceKeywordKeys.Contains(keyword)
        parsedKeyword = replaceKeywordVals[replaceKeywordKeys.IndexOf(keyword)]
        thisColorString = coloredKeywordColors[replaceKeywordKeys.IndexOf(keyword)]
      :?elementKeywords.Contains(keyword)
        parsedKeyword = "[" + elementSymbols[elementKeywords.IndexOf(keyword)] + "]"
        thisColorString = elementColors[elementKeywords.IndexOf(keyword)]
      :
        thisColorString = keywordPalette[paletteIndex]
        ?paletteIndex = 0
          paletteIndex = 1
        :
          paletteIndex = 0

      ?keywordStrings.Count() > 0
        keywordStrings.Add("•")
        keywordColors.Add(keywordPalette[2])

      keywordStrings.Add(string.Capitalize(parsedKeyword))
      keywordColors.Add(thisColorString)
  ?keywordStrings.Count() > 0
    startLine++
    displayColoredStrings(startLine, keywordStrings, keywordColors, xOffset, true)
  startLine++
  return startLine
  
func getTimeColor(curTime, maxTime, isReversing)
  var lerpMidpoint = 0.75
  var averageTimeFraction = 0.1
  var startColor = "" 
  var endColor = ""
  var midColor = ""
  averageTimeFraction = (1.0 * curTime) / maxTime
  ?isReversing
    averageTimeFraction = 1 - averageTimeFraction
  
  ?averageTimeFraction < lerpMidpoint
    startColor = timeStringColors[0]
    endColor = timeStringColors[1]
    averageTimeFraction = averageTimeFraction / lerpMidpoint
    midColor = color.Lerp(startColor, endColor, averageTimeFraction)
  :
    startColor = timeStringColors[1]
    endColor = timeStringColors[2]
    averageTimeFraction = (averageTimeFraction - lerpMidpoint) / (1 - lerpMidpoint)
    midColor = color.Lerp(startColor, endColor, averageTimeFraction)
  return midColor
  
func displayTimeData(startLine)

  var curTimeString = "Current: " + time.FormatDigital(totalTime) + " "
  var curTimeStringSize = string.Size(curTimeString)
  var curTimeStringColor = "#00FFFF"
  
  var averageTimeString = ""
  var averageTimeStringSize = 0
  var averageStringColor = timeStringColors[1]

  var bestTimeString = ""
  var bestTimeStringSize = 0
  var bestStringColor = timeStringColors[1]
  
  var exitTimeString = ""
  var exitTimeStringSize = 0
  var exitStringColor = timeStringColors[1]
  
  var maxTimeBeforeExit = 0
  var timeLeftTillExit = 0
  var minsLeftTillExit = 0
  var secsLeftTillExit = 0
  ?U.Get("maxOverAvgToExitMult") > 0 & U.Get("isSpeedRunning")
    maxTimeBeforeExit = loc.averageTime * U.Get("maxOverAvgToExitMult")
    secsLeftTillExit = math.Floor((maxTimeBeforeExit - totalTime) / 30)
    minsLeftTillExit = math.Floor(secsLeftTillExit / 60)
    secsLeftTillExit -= minsLeftTillExit * 60
    ?secsLeftTillExit < 10
      secsLeftTillExit = "0" + secsLeftTillExit
    exitTimeString = "Force Exit In: " + minsLeftTillExit + ":" + secsLeftTillExit + " "
    exitTimeStringSize = string.Size(exitTimeString)
    exitStringColor = getTimeColor(maxTimeBeforeExit - totalTime, maxTimeBeforeExit, true)
  
  ?loc.averageTime > 0
    averageTimeString = U.toPercent(totalTime, loc.averageTime) + " of Avg  (" + time.FormatDigital(loc.averageTime) + ")"
    averageTimeStringSize = string.Size(averageTimeString)
    averageStringColor = getTimeColor(totalTime, loc.averageTime, false)
  ?loc.bestTime > 0
    bestTimeString = U.toPercent(totalTime, loc.bestTime) + " of Best (" + time.FormatDigital(loc.bestTime) + ")"
    bestTimeStringSize = string.Size(bestTimeString)
    bestStringColor = getTimeColor(totalTime, loc.bestTime, false)
    
  printRight(startLine, curTimeStringColor, curTimeString, 0)
  printRight(startLine + 1, bestStringColor, bestTimeString, 0)
  printRight(startLine + 2, averageStringColor, averageTimeString, 0)
  printRight(startLine + 3, exitStringColor, exitTimeString, 0)

func Display()
  // === HUD Info Display ===
  var xStart = 0
  var yStart = 6
  var lineNum = yStart
  
  ?U.Get("errorMessage")
    >`25,0,#FF0000,@U.Get("errorMessage")@
  ?U.Get("majorDamageAlert")
    printRight(3,"#FFAAAA",U.Get("majorDamageAlert"),0)
    
  ?Type(U.Get("mindFreeze")) = int
    >`25,3,#00FFFF,mFreeze: @U.Get("mindFreeze")@ (@Type(U.Get("mindFreeze"))@) = @totalTime - U.Get("mindFreeze")@


    
  ?U.Get("hideHUD")
    printRight(0,"#FF0000","[Z] HUD", 0)
    return

  var locStringColors = []
  var foeCountString = "   "
  ?foe.count = 0
    foeCountString = "   "
  :?foe.count <= 9
    foeCountString = " x" + foe.count
  :?foe.count >= 10
    foeCountString = "x" + foe.count


  ?loc.stars <= 5
    locStringColors = ["#FF0000", "#FFFFFF", "#AAAAAA"]
  :?loc.stars <= 10
    locStringColors = ["#FF0000", "#00FFFF", "#00CCCC"]
  :
    locStringColors = ["#FF0000", "#FFDD00", "#AA8800"]
  displayColoredStrings(1, [
  ^   foeCountString,
  ^   string.ToUpper(loc.name),
  ^   loc.stars + "*"],
  ^ locStringColors,
  ^ xStart,
  ^ false
  ^)
 
  ?pickup.distance < 9999
    >`10,2,#00FF00,Pickup: @pickup@ (@pickup.distance@)
  ?harvest.distance < 9999
    >`10,2,#00FF00,Harvest: @harvest@ (@harvest.distance@)
  
  var maxDamageToLerpTo = 5.0
  var curDamageRatio = foe.damage / maxDamageToLerpTo
  var stateDmgColors = [color.Lerp("#88FF00", "FF0000", curDamageRatio), "#009999"]
  ?foe.damage > -1
    displayFoe(lineNum, xStart)
    lineNum += 2
    displayColoredStrings(lineNum, [
    ^ ">" + foe.damage + "<",
    ^ "[" + foe.state + ":" + foe.time + "]"
    ^],
    ^stateDmgColors,
    ^4,
    ^ false)
    lineNum++
    >`@xStart@,@lineNum@,#DD0000,+ @parseBuffString(foe.buffs.string)@
    lineNum++
    >`@xStart@,@lineNum@,#009900,- @parseBuffString(foe.debuffs.string)@
  :
    lineNum += 4
  
  lineNum++
  lineNum++
  >`@xStart@,@lineNum@,#00FF00,+ @parseBuffString(buffs.string)@
  lineNum++ 
  >`@xStart@,@lineNum@,#FF0000,- @parseBuffString(debuffs.string)@
  
  lineNum = 23
  xStart = 2
   
  printCooldown(xStart, lineNum, ">Q", "quarterstaff")
  printCooldown(xStart + 6, lineNum, "<<", "mind")
  printCooldown(xStart + 12, lineNum, ">>", "bash")
  printCooldown(xStart + 18, lineNum, " >", "dash")
  lineNum++
  
  printCooldown(xStart, lineNum, "BG", "blade")
  printCooldown(xStart + 6, lineNum, " M", "mask")
  printCooldown(xStart + 12, lineNum, " H", "hammer")
  lineNum++
  
  printCooldown(xStart, lineNum, "Sk", "skeleton_arm")
  printCooldown(xStart + 6, lineNum, " B", "bardiche")
  printCooldown(xStart + 12, lineNum, " T", "fire_talisman")
  lineNum++
  
  
  var rightYStart = 0
  var rightLineNum = rightYStart
 
  printRight(rightLineNum,"#00FF00","[Z] HUD", 15)
  
  ?U.Get("HUDMenuMode") = "SHIFT"
    rightLineNum += displayShiftControls(rightLineNum)
  :?U.Get("HUDMenuMode") = "CTRL"
    rightLineNum += displayCtrlControls(rightLineNum)
  :
    rightLineNum += displayControls(rightLineNum)
  
  var statusString
  ?U.getCounterElement()
    statusString = "[" + U.getCounterElement() + "]"
  :
    statusString = ""
  statusString += " I: " + screen.i + ", X: " + screen.x
    
  printRight(rightLineNum, "#FF00FF", statusString, 0)
  rightLineNum++
  
  var oneHandedColor = #00FFFF

  ?U.Get("assignedBoth") ! false
    oneHandedColor = #999999
    printRight(rightLineNum, "#00FFFF", "[<>] " + U.Get("assignedBoth"), 27)
    printRight(rightLineNum + 1, "#00BBBB", U.Get("bothReason"), 12)
  :
    oneHandedColor = #00FFFF
  rightLineNum++
  rightLineNum++

  ?U.Get("assignedLeft") ! false
    printRight(rightLineNum, oneHandedColor, "[ >] " + U.Get("assignedLeft"), 27)
    printRight(rightLineNum + 1, oneHandedColor, U.Get("leftReason"), 12)
  rightLineNum++
  rightLineNum++

  ?U.Get("assignedRight") ! false
    printRight(rightLineNum, oneHandedColor, "[< ] " + U.Get("assignedRight"), 27)
    printRight(rightLineNum + 1, oneHandedColor, U.Get("rightReason"), 12)
  rightLineNum++
  rightLineNum++
  
  ?U.Get("isActivating")
    printRight(rightLineNum, "#FF00FF", "ACTIVATING: [" + U.Get("isActivating") + "]", 15)
    
  displayTimeData(22)
  
  lineNum = yStart
  rightLineNum = rightYStart
  
  var debugData = false
  var callsArray = []
  var lastCall = false
  var callsString = ""
  
  debugData = U.getDPSDebugData()
  callsArray = debugData[0]
  lastCall = debugData[1]

  ?lastCall
    >`0,24,#FFFF00,@lastCall@
    callsString = string.Join(".", callsArray)
    >`0,25,#FFFF00,@callsString@
    
