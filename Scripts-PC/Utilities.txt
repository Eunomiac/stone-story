// left         A or ←
// right        D or →
// up           W or ↑
// down         S or ↓
// primary      LMB, Return
// back         X
// ability1     Shift
// ability2     Control
// bumpL        Z
// bumpR        C

var bardicheActivationDelay
bardicheActivationDelay = 1
var heavyHammerActivationDelay
heavyHammerActivationDelay = 5

var bosses = ["dysangelos", "poena", "bolesh", "morel", "pallas", "bronze_guardian", "yeti", "nagaraja"]
var bossNoDebuffCheck = [false, false, false, false, "phase2", false, false, false]

var locations = ["Rocky Plateau", "Deadwood Canyon", "Caves of Fear", "Mushroom Forest", "Haunted Halls",  "Boiling Mine", "Icy Ridge", "Temple"]
var locElems = ["none",  "none", "poison", "vigor", "aether", "fire", "ice", "poison"]
var elements = ["none", "vigor", "aether", "fire", "ice", "poison"]
var counterElements = ["none", "poison", "vigor",  "aether", "fire", "ice"]
var healingPotions = ["defensive", "vampiric", "cleansing", "healing"]
var offensivePotions = ["strength", "lightning", "berserk", "lucky"]
var defensivePotions = ["invisibility", "cleansing", "defensive"]
var utilityPotions = ["experience"]

func isHealingPotion(item)
  for i = 0..(healingPotions.Count() - 1)
    ?item = healingPotions[i]
      return true
  return false

func isOffensivePotion(item)
  for i = 0..(offensivePotions.Count() - 1)
    ?item = offensivePotions[i]
      return true
  return false

func isDefensivePotion(item)
  for i = 0..(defensivePotions.Count() - 1)
    ?item = defensivePotions[i]
      return true
  return false

var ranges = ["melee", "close", "medium", "ranged", "screen"]
var units = [5, 11, 16, 25, 35]

var localStorageKeys = ["dpsWatchFoeID", "dpsWatchFoeApH", "dpsWatchSkippedFrames", "dpsWatchAvgDPS"]
var dpsWatchFoeID = false
var dpsWatchFoeApH = false
var dpsWatchSkippedFrames = 0
var dpsWatchAvgDPS = 0.1
var dpsAlpha = 0.1
var effectiveAlpha = 0.1
var frameDurationInSeconds = 1.0 / 30.0

func Set(key, val)
  ?key = "dpsWatchFoeID"
    dpsWatchFoeID = val
  :?key = "dpsWatchFoeApH"
    dpsWatchFoeApH = val
  :?key = "dpsWatchSkippedFrames"
    dpsWatchSkippedFrames = val
  :?key = "dpsWatchAvgDPS"
    dpsWatchAvgDPS = val
  :
    storage.Set(key, val)
  return val

func Get(key)
  ?key = "dpsWatchFoeID"
    return dpsWatchFoeID
  :?key = "dpsWatchFoeApH"
    return dpsWatchFoeApH
  :?key = "dpsWatchSkippedFrames"
    return dpsWatchSkippedFrames
  :?key = "dpsWatchAvgDPS"
    return dpsWatchAvgDPS
  :
    return storage.Get(key)

func Toggle(key)
  Set(key, !Get(key))
  return Get(key)
  
func Cycle(key, vals)
  var curVal = Get(key)
  var index = vals.IndexOf(curVal)
  ?index = vals.Count()
    Set(key, vals[0])
  :
    Set(key, vals[index])
    
func Has(key)
  return storage.Has(key)
  
func Incr(key)
  ?key = "dpsWatchSkippedFrames"
    dpsWatchSkippedFrames++
  :
    storage.Incr(key)
  
func AddTo(key, num)
  ?key = "dpsWatchSkippedFrames"
    dpsWatchSkippedFrames = dpsWatchSkippedFrames + num
  :
    storage.Incr(key, num)
 
func Init()
  ?!Has("hideHUD")
    Set("hideHUD", false)
  ?!Has("HUDMenuMode")
    Set("HUDMenuMode", false)
  ?!Has("isShowingStatusString")
    Set("isShowingStatusString", false)
  ?!Has("isShowingWeaponAssignments")
    Set("isShowingWeaponAssignments", false)
  ?!Has("isShowingAIStatus")
    Set("isShowingAIStatus", false) 
  ?!Has("staffSpeed")
    Set("staffSpeed", true)
  ?!Has("isSpeedRunning")
    Set("isSpeedRunning", false)
  ?!Has("skeletonArm")
    Set("skeletonArm", true)
  ?!Has("preferMelee")
    Set("preferMelee", false)

  ?!Has("assignedLeft")
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)
  ?!Has("assignedBoth")
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)
  ?!Has("assignedRight")
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
  ?!Has("isActivating")
    Set("isActivating", false)
  ?!Has("mindFreeze")
    Set("mindFreeze", false)
  ?!Has("dashFreeze")
    Set("dashFreeze", false)
  ?!Has("isFacingBombCart")
    Set("isFacingBombCart", false)
  ?!Has("errorMessage")
    Set("errorMessage", false)
  ?!Has("potionActivationReason")
    Set("potionActivationReason", "")
  ?loc = hotspring | loc = gate
    Set("hideHUD", true)
    Set("staffSpeed", false)
  ?!Has("isForcingBotFG")
    Set("isForcingBotFG", false)
  ?!Has("isForcingDash")
    Set("isForcingDash", false)
  ?!Has("isDodgingNextFrame")
    Set("isDodgingNextFrame", false)
  ?!Has("rangedFreeze")
    Set("rangedFreeze", false)
  ?!Has("bardicheLog")
    Set("bardicheLog", false)
  ?!Has("heavyHammerLog")
    Set("heavyHammerLog", false)
  ?!Has("lastFrameHP")
    lastFrameHP = hp
  ?!Has("lastFrameState")
    lastFrameState = false
  ?!Has("lastFrameStateTime")
    lastFrameState = false
  ?!Has("secondLastFrameState")
    secondLastFrameState = false
  ?!Has("secondLastFrameStateTime")
    secondLastFrameStateTime = false
  ?!Has("majorDamageAlert")
    Set("majorDamageAlert", false)
  ?!Has("maxOverAvgToExitMult")
    Set("maxOverAvgToExitMult", 0)
  ?!Has("dpsWatchFoeID")
    Set("dpsWatchFoeID", false)
  ?!Has("dpsWatchFoeApH")
    Set("dpsWatchFoeApH", false)
  ?!Has("dpsWatchSkippedFrames")
    Set("dpsWatchSkippedFrames", 0)
  ?!Has("dpsWatchAvgDPS")
    Set("dpsWatchAvgDPS", 0)

    
var timeInState = 0
var lastBardicheState = false
var lastBardicheStateTime = 0
var hasActivatedHeavyHammer = false
var hasActivatedBardiche = false
var lastHeavyHammerState = false
var lastHeavyHammerStateTime = 0
var lastFrameHP = hp
var lastFrameState = false
var lastFrameStateTime = 0
var secondLastFrameState = false
var secondLastFrameStateTime = 0

func Reset(isLocStart)
  InitLeft()
  InitRight()
  InitBoth()
  Set("isForcingDash", false)
  
  ?(lastFrameHP - hp) > 1
    var alertMessage
    alertMessage = (lastFrameHP - hp) + " Dmg»"
    ?secondLastFrameState
      alertMessage += secondLastFrameState + ":" + secondLastFrameStateTime + "»"
    ?lastFrameState
      alertMessage += lastFrameState + ":" + lastFrameStateTime + "»"
    alertMessage += foe.state + ":" + foe.time
    Set("majorDamageAlert", alertMessage)

  var bardicheLog
  bardicheLog = Get("bardicheLog")
  ?string.Size("" + bardicheLog) > 80
    Set("bardicheLog", "")
  ?item.right = bardiche
    ?!lastBardicheState
      lastBardicheState = item.right.state
      lastBardicheStateTime = totalTime
      Set("bardicheLog", item.right.state + ":")
    :?lastBardicheState ! item.right.state
      timeInState = totalTime - lastBardicheStateTime
      Set("bardicheLog", Get("bardicheLog") + timeInState + " > " + item.right.state + ":")
      lastBardicheState = item.right.state
      lastBardicheStateTime = totalTime
  :?lastBardicheState
    timeInState = totalTime - lastBardicheStateTime
    Set("bardicheLog", Get("bardicheLog") + timeInState)
    lastBardicheState = false
    lastBardicheStateTime = 0
    
  ?item.right = heavy hammer & hasActivatedHeavyHammer
    ?!lastHeavyHammerState
      lastHeavyHammerState = item.right.state
      lastHeavyHammerStateTime = totalTime
      Set("heavyHammerLog", item.right.state + ":")
    :?lastHeavyHammerState ! item.right.state & lastHeavyHammerState ! 5
      ?lastHeavyHammerState < 4
        timeInState = totalTime - lastHeavyHammerStateTime
        Set("heavyHammerLog", Get("heavyHammerLog") + timeInState + " > " + item.right.state + ":")
        lastHeavyHammerState = item.right.state
        lastHeavyHammerStateTime = totalTime
      :
        timeInState = totalTime - lastHeavyHammerStateTime
        Set("heavyHammerLog", Get("heavyHammerLog") + timeInState)
        lastHeavyHammerState = 5
  
  lastFrameHP = hp
  ?lastFrameState
    secondLastFrameState = lastFrameState
  ?lastFrameStateTime
    secondLastFrameStateTime = lastFrameStateTime
  ?foe.count > 0
    lastFrameState = foe.state
    lastFrameStateTime = foe.time
  checkActivationAlert()
  ?Get("isForcingBotFG") & item.GetCooldown("blade") > 0
    Set("isForcingBotFG", false)
    ?Get("bothPriority") = 4
      Set("bothPriority", 0)
  ?loc = hotspring | loc = gate
    Set("hideHUD", true)
    Set("staffSpeed", false)
  ?isLocStart
    Set("errorMessage", false)
    Set("assignedLeft", false)
    Set("isFacingBombCart", false)
    Set("leftReason", "")
    Set("leftPriority", 0)
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)
    Set("isForcingBotFG", false)
    Set("majorDamageAlert", false)
    Set("mindFreeze", false)
    Set("bardicheLog", "")
    Set("heavyHammerLog", "")
    Set("dpsWatchFoeID", false)
    Set("dpsWatchFoeApH", false)
    Set("dpsWatchSkippedFrames", 0)
    Set("dpsWatchAvgDPS", 0)
    Set("rangedFreeze", false)
    Set("isDodgingNextFrame", false)

func Romanize(num)
  return ["", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII", "XIII", "XIV", "XV "][num]
  
func Pad(val, length)
  var stringVal = "             " + val
  return string.Sub(stringVal, string.Size(stringVal) - length + 1)

var activationAlertTime
func clearActivationAlertIn(secs)
  activationAlertTime = totalTime + (secs * 30)
func checkActivationAlert()
  ?Type(activationAlertTime) = int & Type(Get("isActivating")) = string & string.Size(Get("isActivating")) > 2
    ?totalTime >= activationAlertTime
      Set("isActivating", false)
      activationAlertTime = false


func ActivateItem()
  ?!item.CanActivate()
    return
  ?!ai.enabled
    return
  ?Get("isActivating") = "heavy hammer"
    hasActivatedHeavyHammer = true
    lastHeavyHammerState = item.right.state
    lastHeavyHammerStateTime = totalTime
    Set("heavyHammerLog", item.right.state + ":")
    activate R
  :?Get("isActivating") = "bardiche"
    hasActivatedBardiche = true
    lastBardicheState = item.right.state
    lastBardicheStateTime = totalTime
    Set("bardicheLog", item.right.state + ":")
    activate R
  :?Get("isActivating")
  ^ & [Get("assignedLeft"), Get("assignedRight"), Get("assignedBoth")].Contains(Get("isActivating"))
  ^ & item.CanActivate() 
    activate R
  Set("isActivating", false)
  
func InitLeft()
  var stateWatch = 0
  ?Get("leftPriority") >= 10 // Watching for item state to not equal this/10)
    stateWatch = Get("leftPriority") / 10
    ?item.left & Type(item.left.state) = int & item.left.state = stateWatch
      return    
    :
      Set("leftPriority", 0)
    
  ?Get("leftPriority") < 4
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)

func InitRight()
  var stateWatch = 0
  ?Get("rightPriority") >= 10 // Watching for item state to not equal this/10)
    stateWatch = Get("rightPriority") / 10
    ?item.right & Type(item.right.state) = int & item.right.state = stateWatch
      return
    :
      Set("rightPriority", 0)
  ?Get("rightPriority") < 4
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
    
func InitBoth()
  var stateWatch = 0
  ?Get("bothPriority") >= 10 // Watching for item state to not equal this/10)
    stateWatch = Get("bothPriority") / 10
    ?item.left & Type(item.left.state) = int & item.left.state = stateWatch
      return    
    :
      Set("bothPriority", 0)
  ?Get("bothPriority") < 4
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)

func AssignBoth(item, priority, reason)
  ?priority < 0
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)
    return
  ?Type(item) = "string" & string.Size(item) > 2
    ?item.GetCount(item) = 0
      return
  ?item.right = bardiche & item.GetCooldown("bardiche") > ((30 - bardicheActivationDelay) * 30)
    return
  ?item.right = heavy hammer & item.GetCooldown("heavy hammer") > ((22 - heavyHammerActivationDelay) * 30)
    return
  ?Get("bothPriority") <= priority & Get("leftPriority") <= priority & Get("rightPriority") <= priority
    AssignLeft("", -1, "")
    AssignRight("", -1, "")
    Set("assignedBoth", item)
    Set("bothReason", priority + ": " + reason)
    Set("bothPriority", priority)

func AssignLeft(item, priority, reason)
  ?priority < 0
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)
    return
  ?Type(item) = "string" & string.Size(item) > 2
    ?item.GetCount(item) = 0
      return
  ?item.right = bardiche & item.GetCooldown("bardiche") > ((30 - bardicheActivationDelay) * 30)
    return
  ?item.right = heavy hammer & item.GetCooldown("heavy hammer") > ((22 - heavyHammerActivationDelay) * 30)
    return
  ?isTwoHanded(item)
    AssignBoth(item, priority, reason)
  :?Get("leftPriority") <= priority & Get("bothPriority") <= priority
    AssignBoth("", -1, "")
    Set("assignedLeft", item)
    Set("leftReason", priority + ": " + reason)
    Set("leftPriority", priority)

func AssignRight(item, priority, reason)
  ?priority < 0
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
    return
  ?Type(item) = "string" & string.Size(item) > 2
    ?item.GetCount(item) = 0
      return
  ?item.right = bardiche & item.GetCooldown("bardiche") > ((30 - bardicheActivationDelay) * 30)
    return
  ?item.right = heavy hammer & item.GetCooldown("heavy hammer") > ((22 - heavyHammerActivationDelay) * 30)
    return
  ?Get("rightPriority") <= priority & Get("bothPriority") <= priority
    AssignBoth("", -1, "")
    Set("assignedRight", item)
    Set("rightReason", priority + ": " + reason)
    Set("rightPriority", priority)

func isValidActivation(param)
  return param & [Get("assignedLeft"), Get("assignedRight"), Get("assignedBoth")].Contains(param)

func AssignActivate(param)
  var alertNotice
  alertNotice = ""
  ?isValidActivation(param)
    Set("isActivating", param)
  
func EquipItems()
  ?Get("assignedLeft") ! false
    equipL @Get("assignedLeft")@
  ?Get("isForcingDash") & canDash()
    equipR @canDash()@
    Set("isForcingDash", false)
  :
    ?Get("assignedRight") ! false
      equipR @Get("assignedRight")@
    ?Get("assignedBoth") ! false
      equip @Get("assignedBoth")@
 
func breakBuff(buff)
  var buffParts = string.Split(buff, ":")
  buffParts[2] = int.Parse(buffParts[2])
  buffParts[3] = int.Parse(buffParts[3])
  return [buffParts[1], buffParts[2], buffParts[3]]
  
func getBuffParts(buffName, buffString)
  var buffStrings = string.split(buffString, ",")
  for buffStr : buffStrings
    var buffParts = string.Split(buffStr, ":")
    ?Type(buffParts) = Type([]) & buffParts.Count() = 4
      ?string.IndexOf(buffParts[1], buffName) > -1
        return [int.Parse(buffParts[2]), int.Parse(buffParts[3])]
  return [0, 0]

func xLookup(val, arr1, arr2)
  ?Type(arr1) ! Type([])
    Set("errorMessage", "'" + arr1 + "' is not an array")
    return false
  ?Type(arr2) ! Type([])
    Set("errorMessage", "'" + arr2 + "' is not an array")
    return false
  var index = arr1.IndexOf(val)
  ?index > -1
    return arr2[index]
  :
    return false

func getBuffCount(buffName)
  return getBuffParts(buffName, buffs.string)[0]

func getDebuffCount(buffName)
  return getBuffParts(buffName, debuffs.string)[0]
  
func getFoeDebuffCount(buffName)
  return getBuffParts(buffName, foe.debuffs.string)[0]

func getArmor()
  return math.Round((armor * 10) + armor.f) / 10

func getDistOf(range)
  return xLookup(range, ranges, units)
 
func isCloseAs(range)
  return foe.distance <= xLookup(range, ranges, units)

func isFarAs(range)
  return foe.distance >= xLookup(range, ranges, units)

func isWithin(rangeA, rangeB)
  var unitA = xLookup(rangeA, ranges, units)
  var unitB = xLookup(rangeB, ranges, units)
  return isInRange(unitA, unitB)

func isInRange(min, max)
  ?foe.count > 0
    ?max > min
      return foe.distance >= min & foe.distance <= max
    :
      return foe.distance >= min

func isInState(stateNum, stateTime)
  return foe.state = stateNum & foe.time >= stateTime

func Dodge(isFreezingDash)
  AssignBoth("mind", 3.8, "<< DODGE <<")
  ?isFreezingDash
    Set("mindFreeze", totalTime + 60)

func getEndurance()
  var percentFloat = 0.01
  percentFloat = (1.0 * hp) / (1.0 * maxhp)
  return percentFloat

func getDashShield()
  ?item.GetCount("bash") > 0 & item.GetCooldown("bash") <= 0 & (foe.count > 5 | (foe ! immune_to_stun & (foe = boss | foe.damage > 4)))
    return "bash"
  :?item.GetCount("dash") > 0
    return "dash"
  :
    return false

func canDash()
  ?!ai.enabled
    return false
  ?!getDashShield()
    return false
  ?Get("isForcingDash") & isInRange(11, 15)
    return getDashShield()
  ?Get("dashFreeze")
    return false

  ?Type(Get("mindFreeze")) = int
    ?totalTime > Get("mindFreeze")
      Set("mindFreeze", false)
    :
      return false

  ?foe.count <= 2 & isInRange(11, 15)
    return getDashShield()
  ?!Get("isSpeedRunning") & !Get("preferMelee") & (foe.count >= 10 | getEndurance() < 1 | armor < (0.5 * maxarmor))
    return false
  ?Get("preferMelee") & item.GetCooldown("bash") <= 0 & isInRange(11, 15)
    return "bash"
  ?isInRange(11, 15) & (foe ! explode | foe = bomb cart)
    return getDashShield()
  return false
  
func isDebuffing(threshold, debuff)
  ?buffs.string = berserk | buffs.string = lucky | buffs.string = strength
    return false
  ?foe.buffs.string = protection
    return false
  ?!isCloseAs("close")
    return false

  for i = 0..(bossNoDebuffCheck.Count() - 1)
    ?foe = bosses[i] & foe = bossNoDebuffCheck[i]
      return false
      
  ?Type(threshold) ! int & Type(threshold) ! float
    Set("errorMessage", "Threshold '" + threshold + "' for '" + debuff + "' is a '" + Type(threshold) + "'")
    threshold = 0

  var isBelowThreshold = (foe.hp + foe.armor) <= threshold * (foe.maxhp + foe.maxarmor)

  ?debuff = "damage" & threshold ! 1 & hp < (0.25 * maxhp)
    isBelowThreshold = false

  ?isBelowThreshold
    return false

  ?debuff = "damage"
    return foe.debuffs.string ! damage & foe ! immune_to_debuff_damage
  :?debuff = "dot"
    return foe.debuffs.string ! dot
  :?debuff = "chill"
    return getFoeDebuffCount("chill") < 6 & foe ! immune_to_debuff_chill
  :?debuff = "armor"
    return foe.maxarmor > 50 & foe.debuffs.string ! fatigue & item.GetCooldown("hammer") <= 0 & item.CanActivate()
  :?debuff = "feeble"
    return foe.debuffs.string ! feeble & item.GetCooldown("mask") <= 0 & item.CanActivate()

func playerPosIsAtLeast(x)
  var screenPos = screen.FromWorldX(pos.x)
  return screenPos >= x

func playerPosIsAtMost(x)
  var screenPos = screen.FromWorldX(pos.x)
  return screenPos <= x

func toSeconds(frameCount)
  return math.Round(frameCount / 30)
  
func toTime(frameCount)
  var numSeconds = toSeconds(frameCount)
  var numMinutes = math.floor(numSeconds / 60)
  numSeconds -= numMinutes * 60
  var numHours = math.floor(numMinutes / 60)
  numMinutes -= numHours * 60
  ?numHours = 0
    numHours = ""
    ?numMinutes = 0
      numMinutes = ""
  numSeconds = numSeconds + ""
  numMinutes = numMinutes + ""
  numHours = numHours + ""
  ?string.Size(numSeconds) = 1
    numSeconds = "0" + numSeconds
  ?(string.Size(numMinutes) + string.Size(numHours)) > 0
    ?string.Size(numMinutes) = 0
      numMinutes = "00:"
    :?string.Size(numMinutes) = 1
      numMinutes = numMinutes + ":"
    ?string.Size(numHours) > 0
      ?string.Size(numMinutes) = 2
        numMinutes = "0" + numMinutes
      numHours = numHours + ":"
  return numHours + numMinutes + numSeconds
  
func toPercent(num, max)
  var percent = (100 * num) / max
  return percent + "%"

func toSimpleFloat(num)
  return math.Round(num * 100) * 0.01

func getFraction(num, denom)
  return (1.0 * num) / denom

func isAtLeastSecsLeft(secs)
  var secsLeft = (loc.averageTime - totalTime) / 30
  return secsLeft > secs
  
func isLessThanSecsLeft(secs)
  var secsLeft = (loc.averageTime - totalTime) / 30
  return secs > secsLeft

func isOverAvgTime()
  ?Get("maxOverAvgToExitMult") = 0
    return false
  ?loc.averageTime
    return getFraction(totalTime, loc.averageTime) > (totalTime * Get("maxOverAvgToExitMult"))
  return false

func getCounterElement()
  var element = ""
  var counterElement = ""
  var resString = ""
  var elementString = ""
  ?foe.count > 0
    for i = 1..5
      element = elements[i]
      counterElement = counterElements[i]
      resString = string.Join("", ["adaptive_defense_", counterElement])
      elementString = " " + element + " "
      ?foe = elementString & foe.buffs.string ! resString
        return counterElement
  return false
  
var potions = ["experience","strength","healing","lightning","invisibility","cleansing","berserk","defensive","lucky","vampiric"]
var ingredients = ["wood + wood", "stone + stone", "tar + tar", "bronze + bronze", "wood + stone", "wood + tar", "wood + bronze", "stone + tar", "stone + bronze", "tar + bronze"]

func getHealingPotion()
  ?res.stone > 1500
    return "defensive"
  :?res.bronze > 1500
    return "vampiric"
  :?res.wood > 1500
    return "cleansing"
  :?res.tar > 3000
    return "healing"
  :?res.stone > res.wood & res.stone > res.bronze
    return "defensive"
  :?res.wood > res.stone & res.wood > res.bronze
    return "cleansing"
  :?res.bronze > res.stone & res.bronze > res.wood
    return "vampiric"

func getOffensivePotion()
  ?loc = boiling & res.stone >= 20
    return "strength"
  return "berserk"
    
func brewPotion(potion)
  ?item.potion = potion
    return
  var ingred = xLookup(potion, potions, ingredients)
  ?ingred = "wood + wood"
    brew wood
  :?ingred = "stone + stone"
    brew stone
  :?ingred = "tar + tar"
    brew tar
  :?ingred = "bronze + bronze"
    brew bronze
  :?ingred = "wood + stone"
    brew wood + stone
  :?ingred = "wood + tar"
    brew wood + tar
  :?ingred = "wood + bronze"
    brew wood + bronze
  :?ingred = "stone + tar"
    brew stone + tar
  :?ingred = "stone + bronze"
    brew stone + bronze
  :?ingred = "tar + bronze"
    brew tar + bronze

func isFacingBoss()
  ?foe = boss & isInRange(0, 35) & (totalTime - time) > 100
    return true  
  return false


func checkForAAC()
  ?!ai.enabled
    return
  ?item.right = heavy hammer & item.GetCooldown("heavy hammer") > ((22 - heavyHammerActivationDelay) * 30)
    return
  ?item.right = bardiche & item.GetCooldown("bardiche") > ((30 - bardicheActivationDelay) * 30)
    return
  ?item.left.state = 3
    equipL wand *0
  ?item.right.state = 3
    equipR shield *0

func isRangedWeapon(itemid)
  return itemid = crossbow | itemid = wand | itemid = talisman | itemid = staff | itemid = ouroboros
func isTwoHanded(itemid)
  return itemid = crossbow | itemid = heavy hammer | itemid = staff | itemid = bardiche | itemid = blade of the fallen god
    
var uniqueCallsArray = []
var lastCall = false

func logFuncCall(funcName)
  lastCall = funcName
  var index = uniqueCallsArray.IndexOf(funcName)
  ?index >= 0
    uniqueCallsArray.RemoveAt(index)
  uniqueCallsArray.Add(funcName)

func getDPSDebugData()
  return [uniqueCallsArray, lastCall]

func updateLastFrameApH()
  logFuncCall("uLF")
  ?foe.count = 0
    unwatchFoe()
  :?isWatchingFoe()
    Set("dpsWatchFoeApH", foeApH())
  :
    watchFoe()
  
func getFrameDmg()
  logFuncCall("gFD")
  ?foe.count > 0 & Type(Get("dpsWatchFoeApH")) = int
    return Get("dpsWatchFoeApH") - foeApH()
  :
    return -1
  
func isFrameDamageValid()
  logFuncCall("iFDV")
  return isWatchingFoe() & getFrameDmg() > 0
  
func foeApH()
  logFuncCall("fApH")
  return foe.armor + foe.hp
 
func isNewFoe()
  logFuncCall("iNF")
  return !isWatchingFoe() & foe.count > 0

func isWatchingFoe()
  logFuncCall("iWF")
  // >`0,18,#FFFF00,fID: @dpsWatchFoeID@ (@Type(dpsWatchFoeID) = string@)
  // >`0,19,#FFFF00,fApH: @dpsWatchFoeApH@ (@Type(dpsWatchFoeApH) = int@)
  // >`0,20,#FFFF00,fCount: @foe.count@ (@foe.count > 0@)
  // >`0,21,#FFFF00,id: @foe.id@ (@foe.id = dpsWatchFoeID@)
  ?Type(dpsWatchFoeID) = string & Type(dpsWatchFoeApH) = int
    >`0,22,#FFFF00,ApH: @foeApH()@ (@foeApH() <= dpsWatchFoeApH@)
    ?foe.count > 0 & foe.id = dpsWatchFoeID & foeApH() <= dpsWatchFoeApH
      >`0,23,#00FF00,Return TRUE
      return true
  >`0,23,#FF0000,Return FALSE
  return false

func isShortOfBestTimeBy(secs)
  return (loc.bestTime - totalTime) / 30 > secs

func unwatchFoe()
  logFuncCall("uF")
  Set("dpsWatchFoeID", false)
  Set("dpsWatchFoeApH", false)
  Set("dpsWatchSkippedFrames", 0)
    
func watchFoe()
  logFuncCall("wF")
  ?foe.count > 0 & foeApH() > 0
    Set("dpsWatchFoeID", foe.id)
    Set("dpsWatchFoeApH", foeApH())
    Set("dpsWatchSkippedFrames", 0)



func UpdateAvgDPS()
  logFuncCall("UADPS")
  ?Get("dpsWatchFoeID") ! foe.id
    unwatchFoe()
  :?isFrameDamageValid()
    effectiveAlpha = 1.0 - math.Pow((1.0 - dpsAlpha), Get("dpsWatchSkippedFrames") + 1.0)
    dpsWatchAvgDPS = effectiveAlpha * (getFrameDmg() / frameDurationInSeconds) + (1 - effectiveAlpha) * Get("dpsWatchAvgDPS")
    dpsWatchSkippedFrames = 0
    >`0,16,#FF4400,eA: @effectiveAlpha@ DPS: @dpsWatchAvgDPS@
  updateLastFrameApH()
  
func displayColoredStrings(lineNum, strings, colors, xStart, isTight)
  var xPos = xStart
  var thisColor
  var thisString
  var thisLength
  for i = 0..(strings.Count() - 1)
    thisColor = colors[i]
    thisString = strings[i] + ""
    thisLength = string.Size(thisString)
    ?!isTight
      thisLength++
    >`@xPos@,@lineNum@,@thisColor@,@thisString@
    xPos += thisLength
