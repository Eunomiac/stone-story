// === CONFIG ===
// ---- THRESHOLD VALUES ----
var smiteThreshold = 11
var dmgDebuffThreshold = 7
var splashThreshold = 6
var foeArmorThreshold = 50
var fastArmorShieldMax = 14
var minSmiteForSpeedRun = 5

// ---- ARSENAL ----
var splashMeleeWeapon = "big aether sword U" 
var healthHammer = "vigor hammer"            
var antiArmorMeleeWeapon = "heavy hammer"    
var debuffDamageWeapon = "poison sword dP"   
var debuffDoTWeapon = "fire sword dF"        
var debuffChillWeapon = "ice sword dI"                      
var magicRangedWeapon = "vigor staff"        
var lifeStealMeleeWeapon = false             
var icePillarWeapon = "big aether sword U"   
var fastArmorShield = "compound shield +14"  
var strongArmorShield = "compound shield +11"
var iceWandA = "ice wand +11"                
var iceWandB = "ice wand +9"                 
var stoneHammerA = "stone hammer +10"        
var stoneHammerB = "stone hammer +6"         

// ---- DEFAULT EQUIPMENT ----
var mainWeapon = "big aether sword U"
var mainShield = strongArmorShield
var mainRanged = "repeating crossbow"

var elemWeapons = [
^mainWeapon,
^"poison sword D",
^"vigor sword D",
^"aether sword D",
^"fire sword D",
^"ice sword +11 D"
]

var elemOffHand = [
^false,
^false,
^false,
^false,
^false,
^"ice sword +10 D"
] 

var elemRanged = [
^mainRanged,
^"poison crossbow D",
^"vigor staff D",    
^"aether crossbow D",
^"fire crossbow D",  
^"ice crossbow D"    
]

var elemShields = [
^mainShield,       
^mainShield,       
^mainShield,       
^mainShield,       
^mainShield,       
^mainShield        
]

var locPotions = [
^"vampiric",
^"vampiric",
^"vampiric",
^"vampiric",
^"vampiric",
^"berserk", 
^"berserk", 
^"berserk"
]
// === END CONFIG ===

func Set(key, val)
  storage.Set(key, val)
  return val

func Get(key)
  return storage.Get(key)

func Toggle(key)
  Set(key, !Get(key))
  return Get(key)
  
func Cycle(key, vals)
  var curVal = Get(key)
  var index = vals.IndexOf(curVal)
  ?index = vals.Count()
    Set(key, vals[0])
  :
    Set(key, vals[index])
    
func Has(key)
  return storage.Has(key)
 
func Init()
  Set("hideHUD", false)
  Set("staffSpeed", true)
  Set("skeletonArm", false)
  Set("isRangeBlocked", false)
  Set("isForcingBotFG", false)
  Set("isForcingDash", false)
  ?!Has("assignedBoth")
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)
  ?!Has("assignedBoth")
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)
  ?!Has("assignedRight")
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
  ?!Has("isActivating")
    Set("isActivating", false)
  ?!Has("mindFreeze")
    Set("mindFreeze", 0)
  ?!Has("isDashBlocked")
    Set("isDashBlocked", false)
  ?!Has("errorMessage")
    Set("errorMessage", false)
  ?loc = hotspring | loc = gate
    Set("hideHUD", true)
    Set("staffSpeed", false)

func Reset()
  Set("errorMessage", false)
  InitLeft()
  InitRight()
  InitBoth()
  Set("isActivating", false)
  Set("isForcingDash", false)
  ?Get("isForcingBotFG") & item.GetCooldown("blade") > 0
    Set("isForcingBotFG", false)
    ?Get("bothPriority") = 4
      Set("bothPriority", 0)
  ?loc = hotspring | loc = gate
    Set("hideHUD", true)
    Set("staffSpeed", false)

func ActivateItem()
  ?item.CanActivate() & Get("isActivating") ! false
    activate R
  
func InitLeft()
  var stateWatch = 0
  ?Get("leftPriority") >= 10 // Watching for item state to not equal this/10)
    stateWatch = Get("leftPriority") / 10
    ?item.left & Type(item.left.state) = int & item.left.state = stateWatch
      return    
    :
      Set("leftPriority", 0)
    
  ?Get("leftPriority") < 4
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)

func InitRight()
  var stateWatch = 0
  ?Get("rightPriority") >= 10 // Watching for item state to not equal this/10)
    stateWatch = Get("rightPriority") / 10
    ?item.right & Type(item.right.state) = int & item.right.state = stateWatch
      return
    :
      Set("rightPriority", 0)
  ?Get("rightPriority") < 4
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
    
func InitBoth()
  var stateWatch = 0
  ?Get("bothPriority") >= 10 // Watching for item state to not equal this/10)
    stateWatch = Get("bothPriority") / 10
    ?item.left & Type(item.left.state) = int & item.left.state = stateWatch
      return    
    :
      Set("bothPriority", 0)
  ?Get("bothPriority") < 4
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)

func AssignBoth(item, priority, reason)
  ?priority < 0
    Set("bothPriority", 0)
  :?Get("bothPriority") <= priority & Get("leftPriority") <= priority & Get("rightPriority") <= priority
    Set("assignedBoth", item)
    Set("bothReason", priority + ": " + reason)
    Set("bothPriority", priority)

func AssignLeft(item, priority, reason)
  ?priority < 0
    Set("leftPriority", 0)
  :?isTwoHanded(item)
    AssignBoth(item, priority, reason)
  :?Get("leftPriority") <= priority & Get("bothPriority") <= priority
    Set("assignedLeft", item)
    ?item = mind
      Set("mindFreeze", time)
    Set("leftReason", priority + ": " + reason)
    Set("leftPriority", priority)

func AssignRight(item, priority, reason)
  ?priority < 0
    Set("rightPriority", 0)
  :?Get("rightPriority") <= priority & Get("bothPriority") <= priority
    Set("assignedRight", item)
    Set("rightReason", priority + ": " + reason)
    Set("rightPriority", priority)

func AssignActivate(param)
  Set("isActivating", param)
  
func EquipItems()
  ?Get("assignedLeft") ! false
    equipL @Get("assignedLeft")@
  ?Get("isForcingDash")
    ?item.GetCooldown("bash") <= 0 & (foe.count > 5 | foe = boss)
      equipR bash
    :
      equipR dash
  :
    ?Get("assignedRight") ! false
      equipR @Get("assignedRight")@
    ?Get("assignedBoth") ! false
      equip @Get("assignedBoth")@
 
func breakBuff(buff)
  var buffParts = string.Split(buff, ":")
  buffParts[2] = int.Parse(buffParts[2])
  buffParts[3] = int.Parse(buffParts[3])
  return [buffParts[1], buffParts[2], buffParts[3]]
  
func getBuffParts(buffName, buffString)
  var buffStrings = string.split(buffString, ",")
  for buffStr : buffStrings
    var buffParts = string.Split(buffStr, ":")
    ?Type(buffParts) = Type([]) & buffParts.Count() = 4
      ?string.IndexOf(buffParts[1], buffName) > -1
        return [int.Parse(buffParts[2]), int.Parse(buffParts[3])]
  return [0, 0]

func xLookup(val, arr1, arr2)
  ?Type(arr1) ! Type([])
    Set("errorMessage", "'" + arr1 + "' is not an array")
    return false
  ?Type(arr2) ! Type([])
    Set("errorMessage", "'" + arr2 + "' is not an array")
    return false
  var index = arr1.IndexOf(val)
  ?index > -1
    return arr2[index]
  :
    return false

func getBuffCount(buffName)
  return getBuffParts(buffName, buffs.string)[0]

func getDebuffCount(buffName)
  return getBuffParts(buffName, debuffs.string)[0]
  
func getFoeDebuffCount(buffName)
  return getBuffParts(buffName, foe.debuffs.string)[0]

func getArmor()
  return math.Round((armor * 10) + armor.f) / 10

var ranges = ["melee", "close", "medium", "ranged", "screen"]
var units = [5, 11, 16, 25, 35]

func isCloseAs(range)
  return foe.distance <= (xLookup(range, ranges, units) + 1)

func isFarAs(range)
  return foe.distance >= (xLookup(range, ranges, units) - 1)

func isWithin(rangeA, rangeB)
  var unitA = xLookup(rangeA, ranges, units)
  var unitB = xLookup(rangeB, ranges, units)
  return isInRange(unitA, unitB)

func isInRange(min, max)
  ?max > min
    return foe.distance >= (min - 1) & foe.distance <= (max + 1)
  :
    return foe.distance >= (min - 1)

func isInState(stateNum, stateTime)
  return foe.state = stateNum & foe.time >= stateTime

func canDash()
  ?Get("isDashBlocked")
    return false
  ?Get("mindFreeze") = 0 | (time - Get("mindFreeze")) > 30
    Set("mindFreeze", 0)
  :
    return false
  ?loc = icy & foe ! boss & (foe.count > 5 | foe ! spawner) & isFarAs("close")
    return false
  ?isInRange(9, 14) & foe ! explode
    ?item.GetCooldown("bash") <= 0 & (foe.count > 5 | foe = boss)
      return "bash"
    :
      return "dash"
  return false

func playerPosIsAtLeast(x)
  var screenPos = screen.FromWorldX(pos.x)
  return screenPos >= x

func playerPosIsAtMost(x)
  var screenPos = screen.FromWorldX(pos.x)
  return screenPos <= x

func toSeconds(frameCount)
  return math.Round(frameCount / 30)
  
func toTime(frameCount)
  var numSeconds = toSeconds(frameCount)
  var numMinutes = math.floor(numSeconds / 60)
  numSeconds -= numMinutes * 60
  var numHours = math.floor(numMinutes / 60)
  numMinutes -= numHours * 60
  ?numHours = 0
    numHours = ""
    ?numMinutes = 0
      numMinutes = ""
  numSeconds = numSeconds + ""
  numMinutes = numMinutes + ""
  numHours = numHours + ""
  ?string.Size(numSeconds) = 1
    numSeconds = "0" + numSeconds
  ?(string.Size(numMinutes) + string.Size(numHours)) > 0
    ?string.Size(numMinutes) = 0
      numMinutes = "00:"
    :?string.Size(numMinutes) = 1
      numMinutes = numMinutes + ":"
    ?string.Size(numHours) > 0
      ?string.Size(numMinutes) = 2
        numMinutes = "0" + numMinutes
      numHours = numHours + ":"
  return numHours + numMinutes + numSeconds
  
func toPercent(num, max)
  var percent = (100 * num) / max
  return percent + "%"

func toSimpleFloat(num)
  return math.Round(num * 100) * 0.01

func getFraction(num, denom)
  return (1.0 * num) / denom

func isOverAvgTime()
  return getFraction(totalTime, loc.averageTime) > 1

var locations = ["Rocky Plateau", "Deadwood Canyon", "Caves of Fear", "Mushroom Forest", "Haunted Halls",  "Boiling Mine", "Icy Ridge", "Temple"]
var locElems = ["none",  "none", "poison", "vigor", "aether", "fire", "ice", "poison"]
var elements = ["none", "vigor", "aether", "fire", "ice", "poison"]
var counterElements = ["none", "poison", "vigor",  "aether", "fire", "ice"]

func getCounterElement()
  var element = ""
  var counterElement = ""
  var resString = ""
  var elementString = ""
  ?foe.count > 0
    for i = 1..5
      element = elements[i]
      counterElement = counterElements[i]
      resString = string.Join("", ["adaptive_defense_", counterElement])
      elementString = " " + element + " "
      ?foe = elementString & foe.buffs.string ! resString
        return counterElement
  return false
  
var potions = ["experience","strength","healing","lightning","invisibility","cleansing","berserk","defensive","lucky","vampiric"]
var ingredients = ["wood + wood", "stone + stone", "tar + tar", "bronze + bronze", "wood + stone", "wood + tar", "wood + bronze", "stone + tar", "stone + bronze", "tar + bronze"]

func getHealingPotion()
  ?res.stone > 1500
    return "defensive"
  :?res.bronze > 1500
    return "vampiric"
  :?res.wood > 1500
    return "cleansing"
  :?res.tar > 3000
    return "healing"
  :?res.stone > res.wood & res.stone > res.bronze
    return "defensive"
  :?res.wood > res.stone & res.wood > res.bronze
    return "cleansing"
  :?res.bronze > res.stone & res.bronze > res.wood
    return "vampiric"
    
func brewPotion(potion)
  var ingred = xLookup(potion, potions, ingredients)
  ?ingred = "wood + wood"
    brew wood + wood
  :?ingred = "stone + stone"
    brew stone + stone
  :?ingred = "tar + tar"
    brew tar + tar
  :?ingred = "bronze + bronze"
    brew bronze + bronze
  :?ingred = "wood + stone"
    brew wood + stone
  :?ingred = "wood + tar"
    brew wood + tar
  :?ingred = "wood + bronze"
    brew wood + bronze
  :?ingred = "stone + tar"
    brew stone + tar
  :?ingred = "stone + bronze"
    brew stone + bronze
  :?ingred = "tar + bronze"
    brew tar + bronze

func isFacingBoss()
  ?isInRange(0, 35)
    ?foe = dysangelos | (loc = deadwood & foe = boss) | foe = bolesh | (loc = mushroom & foe = boss) | foe = pallas | foe = bronze_guardian | foe = hrímnir | foe = nagaraja
      return true
  return false
 
func checkForAAC()
  ?item.left.state = 3
    equipL wand *0
  ?item.right.state = 3
    equipR shield *0

func isRangedWeapon(itemid)
  return itemid = crossbow | itemid = wand | itemid = talisman | itemid = staff | itemid = ouroboros
func isTwoHanded(itemid)
  return itemid = crossbow | itemid = heavy hammer | itemid = staff | itemid = bardiche | itemid = blade of the fallen god

func getMainWeapon()
  ?splashMeleeWeapon & foe.count > splashThreshold & isCloseAs("melee")
    return splashMeleeWeapon    
  ?antiArmorMeleeWeapon & foe.armor > foeArmorThreshold & isCloseAs("melee")
    return antiArmorMeleeWeapon
  ?getCounterElement()
    return elemWeapons[counterElements.IndexOf(getCounterElement())]
  ?foe = boss
    return debuffChillWeapon
  return mainWeapon

func getMainOffhandWeapon()
  ?foe.state > 0 & getCounterElement() & elemOffHand[counterElements.IndexOf(getCounterElement())]
    return elemOffHand[counterElements.IndexOf(getCounterElement())]
  return false

func getMainShield()
  ?armor >= fastArmorShieldMax | fastArmorShield = false
    return strongArmorShield
  return fastArmorShield
  
func getMainRanged()
  ?Get("isRangedBlocked")
    return getMainWeapon()
  ?getCounterElement() & (foe.hp + foe.armor) > 200
    return elemRanged[counterElements.IndexOf(getCounterElement())]
  return mainRanged
 
Init()
Reset()

var locPotion = xLookup(loc.name, locations, locPotions)
var dmgDebuff = 0

?loc.begin
  Reset()
  ?!forcedPotions.Contains(item.potion) & item.potion ! locPotion
    brewPotion(locPotion)
:?loc.loop & item.potion ! locPotion
  brewPotion(locPotion)

dmgDebuff = getDebuffCount("debuff_duration_damage") + getDebuffCount("spider_debuff_damage")
checkForAAC()
AssignRight(getMainShield(), 1, "(initial)")
AssignLeft(getMainWeapon(), 1, "(initial)")

?hp < maxhp
  ?foe.count = 0 | (foe ! spawner & isFarAs("ranged"))
    AssignLeft("ouroboros", 1, "Passive Heal")
  :?lifeStealMeleeWeapon & foe.damage <= 3 & foe ! boss
    AssignLeft(lifeStealMeleeWeapon, 1, "Lifesteal")
	
?pickup.distance < 13
  AssignLeft("star", 2, "Pickup")
  
?Get("staffSpeed") & !Get("isDashBlocked") & item.GetCooldown("quarterstaff") <= 0 & (foe.count = 0 | isFarAs("medium")) & item.CanActivate() & foe ! explode
  AssignBoth("quarterstaff", 20, "@@@ JUMP! @@@")
  AssignActivate("Staff")

Set("isDashBlocked", false)
?isCloseAs("ranged")
  ?foe = explode
    ?iceWandA & iceWandB & buffs.string = smite & (foe.count > 5 | (foe ! spawner & getFoeDebuffCount("chill") < 6 & foe ! immune_to_debuff_chill))
      AssignLeft(iceWandA, 3.5, "Ranged Check (Explode!)")
      AssignRight(iceWandB, 3.5, "Ranged Check (Explode!)")
      Set("isDashBlocked", true)
    :
      AssignLeft(getMainRanged(), 3.5, "Ranged Check (Explode!)")
  :?(item.GetCooldown("blade") > 0 | foe.count <= (smiteThreshold)) & (foe ! boss | (!isInState(1, 0) | !ai.idle))
    ?foe ! immune_to_ranged & isWithin("close", "ranged") & dmgDebuff <= dmgDebuffThreshold & debuffs.string ! yeti_chill & foe ! poena
      ?iceWandA & iceWandB & buffs.string = smite & (foe.count > 5 | (foe ! spawner & getFoeDebuffCount("chill") < 6 & foe ! immune_to_debuff_chill))
        AssignLeft(iceWandA, 2, "Ranged Check (Icy)")
        AssignRight(iceWandB, 2, "Ranged Check (Icy)")
        Set("isDashBlocked", true)
      :
        AssignLeft(getMainRanged(), 2, "Ranged Check")

?foe = magic_vulnerability & isCloseAs("ranged")
  Set("isDashBlocked", true)
  ?iceWandA & iceWandB & buffs.string = smite & (foe.count > 5 | (foe ! spawner & getFoeDebuffCount("chill") < 6 & foe ! immune_to_debuff_chill))
    AssignLeft(iceWandA, 2, "Ranged Check (Explode!)")
    AssignRight(iceWandB, 2, "Ranged Check (Explode!)")
  :
    AssignLeft(magicRangedWeapon, 2, "Magic Weak")
	
?!Get("staffSpeed") & harvest.distance < 9
  ?harvest = Boulder
    AssignRight("shovel", 2, "Harvest Boulder")
  :
    ?item.GetCooldown("hatchet") <= 0 & harvest.distance <= 4
      AssignRight("hatchet", 2, "@@@ HARVEST @@@")
      AssignActivate("Hatchet")
    :
      AssignRight("hatchet", 2, "Harvest Tree")
	  
?foe ! immune_to_physical & foe.hp > 300 & isCloseAs("melee") & item.GetCooldown("bardiche") <= 0
  AssignBoth("bardiche", 20, "@@@ BARDICHE @@@")
  AssignActivate("Bardiche")
  
?Get("isForcingBotFG") & item.GetCooldown("blade") <= 0 & item.CanActivate()
  AssignBoth("blade of the fallen god", 4, "@X@ SMITE @X@")
  AssignActivate("Blade")
?item.GetCooldown("blade") <= 0 & (foe.count > smiteThreshold | (loc = icy & foe.count > (0.8 * smiteThreshold) & foe.maxhp < 50)) & isCloseAs("screen") & item.CanActivate() & foe ! spawner
  AssignBoth("blade of the fallen god", 3, "@@@ SMITE @@@")
  AssignActivate("Blade")
  
?summon.count = 0 & (screen.i > 0 | playerPosIsAtLeast(20)) & item.GetCooldown("fire_talisman") <= 0 & item.CanActivate() & isFarAs("medium") & foe ! poena
  AssignRight("talis", 20, "@@@ SUMMON @@@")
  AssignActivate("Talisman")
  
?isFacingBoss()

  ?buffs.string ! berserk
    ?item.potion = cleansing & debuffs.count > 15
      activate potion
    ?hp < (0.66 * maxhp) & item.potion = defensive & healthHammer
      ?item.left ! healthHammer
        AssignLeft(healthHammer, 4, "Hammer Potion")
      :?maxhp > 50
        activate potion
        AssignLeft("", -1, "")
    :?hp < (0.5 * maxhp) & (item.potion = healing | item.potion = defensive | item.potion = cleansing | item.potion = vampiric)
      activate potion
	  
  ?(foe.armor > 0 & isCloseAs("melee"))
    ?item.GetCooldown("hammer") <= 0 & item.CanActivate()
      AssignBoth("heavy hammer", 20, "@@@ ARMOR @@@")
      AssignActivate("Hammer")
    :
      AssignBoth("heavy hammer", 2, "vs. Armor")
	  
  ?foe = immune_to_physical
    AssignLeft(magicRangedWeapon, 3, "Phys-Immune")
	
  ?buffs.string ! berserk & (foe ! pallas | foe ! phase2) & foe.buffs.string ! protection & isCloseAs("close")
    ?debuffDamageWeapon & foe.debuffs.string ! damage & foe ! immune_to_debuff_damage
      AssignRight("cultist mask", 3, "@-Debuff-@")
      AssignLeft(debuffDamageWeapon, 3, "@-Damage-@")
    :?debuffDoTWeapon & foe.debuffs.string ! dot
      AssignRight("cultist mask", 3, "@-Debuff-@")
      AssignLeft(debuffDoTWeapon, 3, "@-DoT-@")
    :?debuffChillWeapon & getFoeDebuffCount("chill") < 6 & foe ! immune_to_debuff_chill
      ?foe ! nagaraja
        AssignRight("cultist mask", 3, "@-Debuff-@")
        AssignLeft(debuffChillWeapon, 3, "@-Chill-" + getFoeDebuffCount("chill") + "-@")
    :?foe.maxarmor > 50 & foe.debuffs.string ! fatigue & item.GetCooldown("hammer") <= 0 & item.CanActivate()
      AssignBoth("heavy hammer", 20, "@@@ ARMOR @@@")
      AssignActivate("Hammer")
    :?foe.debuffs.string ! feeble & item.GetCooldown("mask") <= 0 & item.CanActivate()
      ?foe ! nagaraja
        AssignRight("cultist mask", 20, "@@@ ENFEEBLE @@@")
        AssignActivate("Mask")
		
  ?foe = bronze_guardian & isInState(33, 30) & (item.potion = strength | item.potion = berserk)
    activate potion
  ?foe = nagaraja & item.potion = berserk & foe.distance <= 6
    activate potion
  ?foe = bolesh & isInState(999, 5) & item.potion = berserk
    activate potion
  ?foe = yeti & isInState(32, 1) & item.potion = berserk & isCloseAs("close")
    activate potion
	
  ?foe = nagaraja & foe.state > 1
    AssignLeft(getMainWeapon(), 2, "!! Naga Left !!")
    AssignRight(getMainOffhandWeapon(), 2, "!! Naga Right !!")
  ?foe = ice wall & icePillarWeapon
    AssignBoth(icePillarWeapon, 2, "!! Ice Wall !!")
  ?foe = poena & stoneHammerA & stoneHammerB
    AssignLeft(stoneHammerA, 3.4, "Stun Lock")
    AssignRight(stoneHammerB, 3.4, "Stun Lock")
  ?foe = bolesh
    Set("isDashBlocked", true)
    AssignBoth(getMainRanged(), 3.4, "!! Bolesh !!")
	
  ?item.GetCooldown("mind") <= 0
    ?foe = bronze_guardian & isInState(32, 10)
      AssignBoth("mind", 3.5, "<< DODGE <<")
      equip mind
    ?foe = nagaraja & isInState(112, 53)
      AssignBoth("mind", 3.5, "<< DODGE <<")
      equip mind
    ?foe = dysangelos & foe = phase1 & isInState(33, 0)
      AssignBoth("mind", 3.5, "<< DODGE <<")
      equip mind
    ?foe = dysangelos & foe = phase3 & isInState(115, 60)
      AssignBoth("mind", 3.5, "<< DODGE <<")
      equip mind
    ?foe = pallas & foe = phase1 & isInState(32, 60)
      AssignBoth("mind", 3.5, "<< DODGE <<")
      equip mind
    ?foe = punishment & isInState(32, 0)
      AssignBoth("mind", 3.5, "<< DODGE <<")
      equip mind
	  
:? isCloseAs("ranged")
    
  ?Get("skeletonArm") & item.GetCooldown("skeleton_arm") <= 0 & foe ! spawner & foe.hp <= 10 & isCloseAs("close") & (item.GetCooldown("blade") > 0 | foe.count <= (smiteThreshold - 4))
    AssignBoth("skeleton", 2, "@-Debuff-PPocket-@")
    ?buffs.string = pick_pocket
      ?foe.hp <= 10 & item.CanActivate()
        AssignBoth("skeleton", 3, "@@@ PICKPOCKET @@@")
        AssignActivate("Skeleton Arm")

  ?foe = immune_to_physical
    AssignLeft(magicRangedWeapon, 3, "Phys-Immune")

  ?(foe = ice pillar | foe = ice wall) & isCloseAs("ranged") & icePillarWeapon
    ?canDash()
      AssignRight(canDash(), 3.5, ">> DASH >>")
    ?isCloseAs("close")
      AssignLeft(icePillarWeapon, 3, "!! Ice Pillar !!")

  ?foe = acronian
    AssignLeft(getMainWeapon(), 2, "!! Acro Left !!")
    AssignRight(getMainOffhandWeapon(), 2, "!! Acro Right !!")

?canDash()
  AssignRight(canDash(), 3.5, ">> DASH >>")
  
?hp <= (0.25 * maxhp) & (item.potion = healing | item.potion = defensive | item.potion = cleansing | item.potion = vampiric)
  ?item.potion = defensive & healthHammer
    ?item.left ! healthHammer
      AssignLeft(healthHammer, 3.4, "Hammer Potion")
    :?maxhp > 50
      activate potion
      AssignLeft("", -1, "")
  :
    activate potion
	
EquipItems()
ActivateItem()