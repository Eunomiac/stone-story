// = CONFIG =
// - THRESHOLD VALUES
var smiteThreshold = 6
var dmgDebuffThreshold = 7
var splashThreshold = 3
var foeArmorThreshold = 50
var fastArmorShieldMax = 14
var maxOverAvgToExitMult = 1.15
var devourFireRuneThreshold = 3
var devourFireRuneBossThreshold = 10
                                
// - ARSENAL
var splashMeleeWeapon = "big aether sword U"
var healthHammer = "vigor hammer"
var antiArmorMeleeWeapon = "heavy hammer"
var debuffDamageWeapon = "poison sword dP"
var debuffDoTWeapon = "fire sword dF"
var debuffChillWeapon = "ice sword dI"                                         
var magicRangedWeapon = "vigor staff"
var lifeStealMeleeWeapon = false
var lifeStealRangedWeapon = false
var lifeStealShield = "vigor shield h"
var icePillarWeapon = "big aether sword U"
var fastArmorShield = "compound shield +10"
var strongArmorShield = "compound shield +11"
var iceWandA = "ice wand +15"
var iceWandB = "ice wand +12"
var iceWandBossA = iceWandA
var iceWandBossB = iceWandB
var stoneHammerA = "stone hammer +10"
var stoneHammerB = "stone hammer +6"

// - DEFAULT EQUIPMENT
var mainWeapon = "big aether sword U"
var mainShield = strongArmorShield
var mainRanged = "repeating crossbow"

// - ELEMENTAL WEAPONS
var elemWeapons = [
^mainWeapon,
^"poison sword D",
^"vigor sword D",
^"aether sword D",
^"fire sword D",
^"ice sword +11 D"
]

var elemOffHand = [
^false,
^false,
^false,
^false,
^false,
^"ice sword +10 D"
] 

var elemRanged = [
^mainRanged,
^"poison crossbow D",
^"vigor staff D",
^"aether crossbow D",
^"fire crossbow D",
^"ice crossbow D"
]

var elemShields = [
^mainShield,
^mainShield,
^mainShield,
^mainShield,
^mainShield,
^mainShield
]

// - POTIONS
var locPotions = [
^"vampiric",
^"vampiric",
^"vampiric",
^"vampiric",
^"vampiric",
^"berserk", 
^"berserk", 
^"berserk"
]

// ---- BOSSES ----
var poisonDebuffThreshold = [                          
^0,
^1,
^1,
^0.25,
^1,
^1,
^0.15,
^0.15
]

var iceDebuffThreshold = [
^0.1,
^1,
^1,
^0.1,
^0.1,
^1,
^1,
^1
]

var fireDebuffThreshold = [                       
^0.05,
^1,
^1,
^0.1,
^0.05,
^1,
^0.15,
^0.05
]

var maskDebuffThreshold = [
^0.15,
^1,
^0.15,
^0.15,
^0.15,
^1,
^0.15,
^1
]
// = END CONFIG =

var bosses = ["dysangelos", "poena", "bolesh", "morel", "pallas", "bronze_guardian", "yeti", "nagaraja"]
var bossNoDebuffCheck = [false, false, false, false, "phase2", false, false, false]
var locations = ["Rocky Plateau", "Deadwood Canyon", "Caves of Fear", "Mushroom Forest", "Haunted Halls",  "Boiling Mine", "Icy Ridge", "Temple"]
var locElems = ["none",  "none", "poison", "vigor", "aether", "fire", "ice", "poison"]
var elements = ["none", "vigor", "aether", "fire", "ice", "poison"]
var counterElements = ["none", "poison", "vigor",  "aether", "fire", "ice"]
var potions = ["experience","strength","healing","lightning","invisibility","cleansing","berserk","defensive","lucky","vampiric"]
var ingredients = ["wood + wood", "stone + stone", "tar + tar", "bronze + bronze", "wood + stone", "wood + tar", "wood + bronze", "stone + tar", "stone + bronze", "tar + bronze"]
var healingPotions = ["defensive", "vampiric", "cleansing", "healing"]
var ranges = ["melee", "close", "medium", "ranged", "screen"]
var units = [5, 11, 16, 25, 35]

func isHealingPotion(item)
  for i = 0..(healingPotions.Count() - 1)
    ?item = healingPotions[i]
      return true
  return false

func Set(key, val)
  ?key = "dpsWatchFoeID"
    dpsWatchFoeID = val
  :?key = "dpsWatchFoeApH"
    dpsWatchFoeApH = val
  :?key = "dpsWatchSkippedFrames"
    dpsWatchSkippedFrames = val
  :?key = "dpsWatchAvgDPS"
    dpsWatchAvgDPS = val
  :
    storage.Set(key, val)
  return val

func Get(key)
  ?key = "dpsWatchFoeID"
    return dpsWatchFoeID
  :?key = "dpsWatchFoeApH"
    return dpsWatchFoeApH
  :?key = "dpsWatchSkippedFrames"
    return dpsWatchSkippedFrames
  :?key = "dpsWatchAvgDPS"
    return dpsWatchAvgDPS
  :
    return storage.Get(key)

func Toggle(key)
  Set(key, !Get(key))
  return Get(key)
  
func Cycle(key, vals)
  var curVal = Get(key)
  var index = vals.IndexOf(curVal)
  ?index = vals.Count()
    Set(key, vals[0])
  :
    Set(key, vals[index])
    
func Has(key)
  return storage.Has(key)
  
func Incr(key)
  ?key = "dpsWatchSkippedFrames"
    dpsWatchSkippedFrames++
  :
    storage.Incr(key)
  
func AddTo(key, num)
  ?key = "dpsWatchSkippedFrames"
    dpsWatchSkippedFrames = dpsWatchSkippedFrames + num
  :
    storage.Incr(key, num)
 
func Init()
  ?!Has("hideHUD")
    Set("hideHUD", false)
  ?!Has("HUDMenuMode")
    Set("HUDMenuMode", false)
  ?!Has("staffSpeed")
    Set("staffSpeed", true)
  ?!Has("isSpeedRunning")
    Set("isSpeedRunning", false)
  ?!Has("skeletonArm")
    Set("skeletonArm", true)
  ?!Has("isRangeBlocked")
    Set("isRangeBlocked", false)

  ?!Has("assignedLeft")
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)
  ?!Has("assignedBoth")
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)
  ?!Has("assignedRight")
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
  ?!Has("isActivating")
    Set("isActivating", false)
  ?!Has("mindFreeze")
    Set("mindFreeze", 0)
  ?!Has("isDashBlocked")
    Set("isDashBlocked", false)
  ?!Has("errorMessage")
    Set("errorMessage", false)
  ?loc = hotspring | loc = gate
    Set("hideHUD", true)
    Set("staffSpeed", false)
  ?!Has("isForcingBotFG")
    Set("isForcingBotFG", false)
  ?!Has("isForcingDash")
    Set("isForcingDash", false)
  ?!Has("lastFrameHP")
    Set("lastFrameHP", hp)
  ?!Has("lastFrameState")
    Set("lastFrameState", false)
  ?!Has("lastFrameStateTime")
    Set("lastFrameState", false)
  ?!Has("secondLastFrameState")
    Set("secondLastFrameState", false)
  ?!Has("secondLastFrameStateTime")
    Set("secondLastFrameStateTime", false)
  ?!Has("majorDamageAlert")
    Set("majorDamageAlert", false)
  ?!Has("maxOverAvgToExitMult")
    Set("maxOverAvgToExitMult", 0)
  ?!Has("dpsWatchFoeID")
    Set("dpsWatchFoeID", false)
  ?!Has("dpsWatchFoeApH")
    Set("dpsWatchFoeApH", false)
  ?!Has("dpsWatchSkippedFrames")
    Set("dpsWatchSkippedFrames", 0)
  ?!Has("dpsWatchAvgDPS")
    Set("dpsWatchAvgDPS", 0)
    
func Reset(isLocStart)
  InitLeft()
  InitRight()
  InitBoth()
  Set("isActivating", false)
  Set("isForcingDash", false)

  ?isLocStart
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)

func ActivateItem()
  ?item.CanActivate() & Get("isActivating") ! false
    activate R
  
func InitLeft()
  var stateWatch = 0
  ?Get("leftPriority") >= 10
    stateWatch = Get("leftPriority") / 10
    ?item.left & Type(item.left.state) = int & item.left.state = stateWatch
      return    
    :
      Set("leftPriority", 0)
    
  ?Get("leftPriority") < 4
    Set("assignedLeft", false)
    Set("leftReason", "")
    Set("leftPriority", 0)

func InitRight()
  var stateWatch = 0
  ?Get("rightPriority") >= 10
    stateWatch = Get("rightPriority") / 10
    ?item.right & Type(item.right.state) = int & item.right.state = stateWatch
      return
    :
      Set("rightPriority", 0)
  ?Get("rightPriority") < 4
    Set("assignedRight", false)
    Set("rightReason", "")
    Set("rightPriority", 0)
    
func InitBoth()
  var stateWatch = 0
  ?Get("bothPriority") >= 10
    stateWatch = Get("bothPriority") / 10
    ?item.left & Type(item.left.state) = int & item.left.state = stateWatch
      return    
    :
      Set("bothPriority", 0)
  ?Get("bothPriority") < 4
    Set("assignedBoth", false)
    Set("bothReason", "")
    Set("bothPriority", 0)

func AssignBoth(item, priority, reason)
  ?priority < 0
    Set("bothPriority", 0)
    return
  ?Type(item) = "string" & string.Size(item) > 2
    ?item.GetCount(item) = 0
      return
  ?Get("bothPriority") <= priority & Get("leftPriority") <= priority & Get("rightPriority") <= priority
    Set("assignedBoth", item)
    Set("bothReason", priority + ": " + reason)
    Set("bothPriority", priority)

func AssignLeft(item, priority, reason)
  ?priority < 0
    Set("leftPriority", 0)
    return
  ?Type(item) = "string" & string.Size(item) > 2
    ?item.GetCount(item) = 0
      return
  ?isTwoHanded(item)
    AssignBoth(item, priority, reason)
  :?Get("leftPriority") <= priority & Get("bothPriority") <= priority
    Set("assignedLeft", item)
    ?item = mind
      Set("mindFreeze", time)
    Set("leftReason", priority + ": " + reason)
    Set("leftPriority", priority)

func AssignRight(item, priority, reason)
  ?priority < 0
    Set("rightPriority", 0)
    return
  ?Type(item) = "string" & string.Size(item) > 2
    ?item.GetCount(item) = 0
      return
  ?Get("rightPriority") <= priority & Get("bothPriority") <= priority
    Set("assignedRight", item)
    Set("rightReason", priority + ": " + reason)
    Set("rightPriority", priority)

func AssignActivate(param)
  Set("isActivating", param)
  
func EquipItems()
  ?Get("assignedLeft") ! false
    equipL @Get("assignedLeft")@
  ?Get("isForcingDash") & canDash()
    equipR @canDash()@
    Set("isForcingDash", false)
  :
    ?Get("assignedRight") ! false
      equipR @Get("assignedRight")@
    ?Get("assignedBoth") ! false
      equip @Get("assignedBoth")@
 
func breakBuff(buff)
  var buffParts = string.Split(buff, ":")
  buffParts[2] = int.Parse(buffParts[2])
  buffParts[3] = int.Parse(buffParts[3])
  return [buffParts[1], buffParts[2], buffParts[3]]
  
func getBuffParts(buffName, buffString)
  var buffStrings = string.split(buffString, ",")
  for buffStr : buffStrings
    var buffParts = string.Split(buffStr, ":")
    ?Type(buffParts) = Type([]) & buffParts.Count() = 4
      ?string.IndexOf(buffParts[1], buffName) > -1
        return [int.Parse(buffParts[2]), int.Parse(buffParts[3])]
  return [0, 0]

func xLookup(val, arr1, arr2)
  ?Type(arr1) ! Type([])
    Set("errorMessage", "'" + arr1 + "' is not an array")
    return false
  ?Type(arr2) ! Type([])
    Set("errorMessage", "'" + arr2 + "' is not an array")
    return false
  var index = arr1.IndexOf(val)
  ?index > -1
    return arr2[index]
  :
    return false

func getBuffCount(buffName)
  return getBuffParts(buffName, buffs.string)[0]

func getDebuffCount(buffName)
  return getBuffParts(buffName, debuffs.string)[0]
  
func getFoeDebuffCount(buffName)
  return getBuffParts(buffName, foe.debuffs.string)[0]

func getArmor()
  return math.Round((armor * 10) + armor.f) / 10

func isCloseAs(range)
  return foe.distance <= xLookup(range, ranges, units)

func isFarAs(range)
  return foe.distance >= xLookup(range, ranges, units)

func isWithin(rangeA, rangeB)
  var unitA = xLookup(rangeA, ranges, units)
  var unitB = xLookup(rangeB, ranges, units)
  return isInRange(unitA, unitB)

func isInRange(min, max)
  ?foe.count > 0
    ?max > min
      return foe.distance >= min & foe.distance <= max
    :
      return foe.distance >= min

func isInState(stateNum, stateTime)
  return foe.state = stateNum & foe.time >= stateTime

func Dodge()
  AssignBoth("mind", 3.5, "<< DODGE <<")
  equip mind

func getEndurance()
  var percentFloat = 0.01
  percentFloat = (1.0 * hp) / (1.0 * maxhp)
  return percentFloat

func getDashShield()
  ?item.GetCount("bash") > 0 & item.GetCooldown("bash") <= 0 & (foe.count > 5 | (foe ! immune_to_stun & (foe = boss | foe.damage > 4)))
    return "bash"
  :?item.GetCount("dash") > 0
    return "dash"
  :
    return false

func canDash()
  ?!getDashShield()
    return false
  ?Get("isForcingDash")
    return getDashShield()
  ?Get("isDashBlocked")
    return false
  ?!Get("isSpeedRunning") & (foe.count >= 10 | getEndurance() < 1 | armor < (0.5 * maxarmor))
    return false

  ?Get("mindFreeze") = 0 | (time - Get("mindFreeze")) > 30
    Set("mindFreeze", 0)
  :
    return false

  ?isInRange(9, 14) & foe ! explode
    return getDashShield()
  return false
  
func isDebuffing(threshold, debuff)
  ?buffs.string = berserk
    return false
  ?foe.buffs.string = protection
    return false
  ?!isCloseAs("close")
    return false

  for i = 0..(bossNoDebuffCheck.Count() - 1)
    ?foe = bosses[i] & foe = bossNoDebuffCheck[i]
      return false

  var isBelowThreshold = (foe.hp + foe.armor) <= threshold * (foe.maxhp + foe.maxarmor)

  ?debuff = "damage" & threshold ! 1 & hp < (0.25 * maxhp)
    isBelowThreshold = false

  ?isBelowThreshold
    return false

  ?debuff = "damage"
    return foe.debuffs.string ! damage & foe ! immune_to_debuff_damage
  :?debuff = "dot"
    return foe.debuffs.string ! dot
  :?debuff = "chill"
    return getFoeDebuffCount("chill") < 6 & foe ! immune_to_debuff_chill
  :?debuff = "armor"
    return foe.maxarmor > 50 & foe.debuffs.string ! fatigue & item.GetCooldown("hammer") <= 0 & item.CanActivate()
  :?debuff = "feeble"
    return foe.debuffs.string ! feeble & item.GetCooldown("mask") <= 0 & item.CanActivate()

func playerPosIsAtLeast(x)
  var screenPos = screen.FromWorldX(pos.x)
  return screenPos >= x

func playerPosIsAtMost(x)
  var screenPos = screen.FromWorldX(pos.x)
  return screenPos <= x

func toSeconds(frameCount)
  return math.Round(frameCount / 30)
  
func toTime(frameCount)
  var numSeconds = toSeconds(frameCount)
  var numMinutes = math.floor(numSeconds / 60)
  numSeconds -= numMinutes * 60
  var numHours = math.floor(numMinutes / 60)
  numMinutes -= numHours * 60
  ?numHours = 0
    numHours = ""
    ?numMinutes = 0
      numMinutes = ""
  numSeconds = numSeconds + ""
  numMinutes = numMinutes + ""
  numHours = numHours + ""
  ?string.Size(numSeconds) = 1
    numSeconds = "0" + numSeconds
  ?(string.Size(numMinutes) + string.Size(numHours)) > 0
    ?string.Size(numMinutes) = 0
      numMinutes = "00:"
    :?string.Size(numMinutes) = 1
      numMinutes = numMinutes + ":"
    ?string.Size(numHours) > 0
      ?string.Size(numMinutes) = 2
        numMinutes = "0" + numMinutes
      numHours = numHours + ":"
  return numHours + numMinutes + numSeconds
  
func toPercent(num, max)
  var percent = (100 * num) / max
  return percent + "%"

func toSimpleFloat(num)
  return math.Round(num * 100) * 0.01

func getFraction(num, denom)
  return (1.0 * num) / denom

func isAtLeastSecsLeft(secs)
  var secsLeft = (loc.averageTime - totalTime) / 30
  return secsLeft > secs
  
func isLessThanSecsLeft(secs)
  var secsLeft = (loc.averageTime - totalTime) / 30
  return secs > secsLeft

func isOverAvgTime()
  ?Get("maxOverAvgToExitMult") = 0
    return false
  ?loc.averageTime
    return getFraction(totalTime, loc.averageTime) > (totalTime * Get("maxOverAvgToExitMult"))
  return false

func getCounterElement()
  var element = ""
  var counterElement = ""
  var resString = ""
  var elementString = ""
  ?foe.count > 0
    for i = 1..5
      element = elements[i]
      counterElement = counterElements[i]
      resString = string.Join("", ["adaptive_defense_", counterElement])
      elementString = " " + element + " "
      ?foe = elementString & foe.buffs.string ! resString
        return counterElement
  return false

func getHealingPotion()
  ?res.stone > 1500
    return "defensive"
  :?res.bronze > 1500
    return "vampiric"
  :?res.wood > 1500
    return "cleansing"
  :?res.tar > 3000
    return "healing"
  :?res.stone > res.wood & res.stone > res.bronze
    return "defensive"
  :?res.wood > res.stone & res.wood > res.bronze
    return "cleansing"
  :?res.bronze > res.stone & res.bronze > res.wood
    return "vampiric"
    
func brewPotion(potion)
  ?item.potion = potion
    return
  var ingred = xLookup(potion, potions, ingredients)
  ?ingred = "wood + wood"
    brew wood + wood
  :?ingred = "stone + stone"
    brew stone + stone
  :?ingred = "tar + tar"
    brew tar + tar
  :?ingred = "bronze + bronze"
    brew bronze + bronze
  :?ingred = "wood + stone"
    brew wood + stone
  :?ingred = "wood + tar"
    brew wood + tar
  :?ingred = "wood + bronze"
    brew wood + bronze
  :?ingred = "stone + tar"
    brew stone + tar
  :?ingred = "stone + bronze"
    brew stone + bronze
  :?ingred = "tar + bronze"
    brew tar + bronze

func isFacingBoss()
  ?isInRange(0, 35)
    ?foe = dysangelos | (loc = deadwood & foe = boss) | foe = bolesh | (loc = mushroom & foe = boss) | foe = pallas | foe = bronze_guardian | foe = hrímnir | foe = nagaraja
      return true
  return false
 
func checkForAAC()
  ?item.left.state = 3
    equipL wand *0
  ?item.right.state = 3
    equipR shield *0

func isRangedWeapon(itemid)
  return itemid = runestone | itemid = crossbow | itemid = wand | itemid = talisman | itemid = staff | itemid = ouroboros
func isTwoHanded(itemid)
  return itemid = crossbow | itemid = heavy hammer | itemid = staff | itemid = bardiche | itemid = blade of the fallen god | itemid = skeleton arm

func isShortOfBestTimeBy(secs)
  return (loc.bestTime - totalTime) / 30 > secs

func getMainWeapon()
  ?splashMeleeWeapon & foe.count > splashThreshold & isCloseAs("melee")
    return splashMeleeWeapon    
  ?antiArmorMeleeWeapon & foe.armor > foeArmorThreshold & isCloseAs("melee")
    return antiArmorMeleeWeapon
  ?getCounterElement()
    return elemWeapons[counterElements.IndexOf(getCounterElement())]
  ?foe = boss
    return debuffChillWeapon
  return mainWeapon

func getMainOffhandWeapon()
  ?foe.state > 0 & getCounterElement() & elemOffHand[counterElements.IndexOf(getCounterElement())]
    return elemOffHand[counterElements.IndexOf(getCounterElement())]
  return false

func getMainShield()
  ?fastArmorShield & armor < fastArmorShieldMax
    return fastArmorShield
  ?getCounterElement()
    return elemShields[counterElements.IndexOf(getCounterElement())]
  return mainShield
  
func getMainRanged()
  ?Get("isRangedBlocked") & foe ! explode & foe ! bolesh & foe ! bronze_guardian & foe ! yeti
    return getMainWeapon()
  ?getCounterElement() & (foe.hp + foe.armor) > 200
    return elemRanged[counterElements.IndexOf(getCounterElement())]
  return mainRanged

Init()
Reset(false)

var locPotion = xLookup(loc.name, locations, locPotions)

var debuffDmgThreshold = xLookup(loc.name, locations, poisonDebuffThreshold)
var debuffChillThreshold = xLookup(loc.name, locations, iceDebuffThreshold)
var debuffDotThreshold = xLookup(loc.name, locations, fireDebuffThreshold)
var debuffFeebleThreshold = xLookup(loc.name, locations, maskDebuffThreshold)

var dmgDebuff = 0
dmgDebuff = getDebuffCount("debuff_duration_damage") + getDebuffCount("spider_debuff_damage")

?loc.begin | loc.loop
  Set("maxOverAvgToExitMult", maxOverAvgToExitMult)
  Reset(true)
  ?loc.begin & !forcedPotions.Contains(item.potion) & item.potion ! locPotion
    brewPotion(locPotion)



checkForAAC()
AssignRight(getMainShield(), 1, "(initial)")
AssignLeft(getMainWeapon(), 1, "(initial)")

?getEndurance() < 1
  ?foe.count = 0 | (foe ! spawner & isFarAs("ranged"))
    AssignLeft("ouroboros", 1, "Passive Heal")
  :?lifeStealMeleeWeapon & foe.damage <= 3 & foe ! boss
    AssignLeft(lifeStealMeleeWeapon, 1, "Lifesteal")

?pickup.distance < 13
  AssignLeft("star", 2, "Pickup")

?Get("staffSpeed") & !Get("isDashBlocked")
 ^ & item.GetCooldown("quarterstaff") <= 0
 ^ & (foe ! bronze_guardian | isInState(33, 10))
 ^ & item.CanActivate()
 ^ & foe ! explode
  AssignBoth("quarterstaff", 20, "@@@ JUMP! @@@")
  AssignActivate("Staff")

Set("isDashBlocked", false)
?foe ! immune_to_ranged & isCloseAs("ranged")

  ?foe = explode
    ?iceWandA & iceWandB & getBuffCount("smite") > 0
    ^& foe ! immune_to_debuff_chill
    ^& getFoeDebuffCount("chill") < 6
      AssignLeft(iceWandA, 3.5, "Ranged Check (Explode!)")
      AssignRight(iceWandB, 3.5, "Ranged Check (Explode!)")
      Set("isDashBlocked", true)
    :
      AssignLeft(getMainRanged(), 3.5, "Ranged Check (Explode!)")
      
  :?isFacingBoss()
    ?item.CanActivate() & (foe ! bronze_guardian | foe.state > 1)
      ?iceWandBossA & iceWandBossB & getBuffCount("smite") > 0
      ^& foe ! immune_to_debuff_chill
      ^& getFoeDebuffCount("chill") < 6
        AssignLeft(iceWandBossA, 2.5, "Ranged Check (BOSS)")
        AssignRight(iceWandBossB, 2.5, "Ranged Check (BOSS)")
      :?isWithin("close", "ranged")
        AssignLeft(getMainRanged(), 2.5, "Ranged Check")
      
  :?foe = magic_vulnerability
   ^| foe = immune_to_physical
   ^| (
   ^    isFarAs("close")
   ^    & foe ! wall & foe ! pillar
   ^  )
    var weapon
    var priority
    weapon = getMainRanged()
    priority = 2.5
    ?foe = magic_vulnerability
      Set("isDashBlocked", true)
      weapon = magicRangedWeapon
      priority = 3
    :?foe = immune_to_physical
      weapon = magicRangedWeapon
      priority = 3      

    ?iceWandA & iceWandB & getBuffCount("smite") > 0
    ^&(foe.count > 5
    ^  | (foe ! spawner
    ^    & getFoeDebuffCount("chill") < 6
    ^    & foe ! immune_to_debuff_chill ) )
      AssignLeft(iceWandA, priority, "Ranged Check (Icy)")
      AssignRight(iceWandB, priority, "Ranged Check (Icy)")
    :?dmgDebuff <= dmgDebuffThreshold
     ^& debuffs.string ! yeti_chill
      AssignLeft(weapon, priority - 0.5, "Ranged Check")

?!Get("staffSpeed") & harvest.distance < 9
  ?harvest = Boulder
    AssignRight("shovel", 2, "Harvest Boulder")
  :
    ?item.GetCooldown("hatchet") <= 0 & harvest.distance <= 4
      AssignRight("hatchet", 2, "@@@ HARVEST @@@")
      AssignActivate("Hatchet")
    :
      AssignRight("hatchet", 2, "Harvest Tree")

?foe ! immune_to_physical
^& (foe.armor + foe.hp) > 300
^& isCloseAs("melee")
^& item.GetCooldown("bardiche") <= 0 & item.CanActivate()
  AssignBoth("bardiche", 20, "@@@ BARDICHE @@@")
  AssignActivate("Bardiche")

?item.GetCooldown("blade") <= 0 & item.canActivate()
  ?isCloseAs("ranged")
  ^& foe.count > smiteThreshold
  ^& foe ! spawner
  ^& (isAtLeastSecsLeft(120) | isLessThanSecsLeft(90))
    AssignBoth("blade of the fallen god", 3, "@@@ SMITE @@@")
    AssignActivate("Blade")

?summon.count = 0
^& item.GetCooldown("fire_talisman") <= 0 & item.CanActivate()
^& isFarAs("medium")
^& foe ! poena
  AssignRight("talis", 20, "@@@ SUMMON @@@")
  AssignActivate("Talisman")

?isFacingBoss()

  ?buffs.string ! berserk
    ?item.potion = cleansing
    ^& debuffs.count > 15
      activate potion
    ?healthHammer
    ^& item.potion = defensive
    ^& getEndurance() < 0.66
      ?item.left ! healthHammer
        AssignLeft(healthHammer, 4, "Hammer Potion")
      :?maxhp > 50
        activate potion
        AssignLeft("", -1, "")
    :?getEndurance() < 0.5
    ^& (
    ^  item.potion = healing
    ^| item.potion = defensive
    ^| item.potion = cleansing
    ^| item.potion = vampiric
    ^  )
      activate potion
    
  ?devourFireRuneBossThreshold > 0
  ^& summon.GetId() = cinderwisp
  ^& summon.GetVar("ignition") >= devourFireRuneBossThreshold  
    activate cinderwisp

  ?foe.armor > 0 & isCloseAs("melee")
    ?item.GetCooldown("hammer") <= 0 & item.CanActivate()
      AssignBoth("heavy hammer", 20, "@@@ ARMOR @@@")
      AssignActivate("Hammer")
    :
      AssignBoth("heavy hammer", 2, "vs. Armor")

  ?foe = immune_to_physical
    ?iceWandBossA & iceWandBossB
    ^& getBuffCount("smite") > 0
      AssignLeft(iceWandBossA, 3, "Phys-Immune")
      AssignRight(iceWandBossB, 3, "Phys-Immune")
    :
      AssignLeft(magicRangedWeapon, 3, "Phys-Immune")

  ?debuffDamageWeapon & isDebuffing(debuffDmgThreshold, "damage")
    AssignRight("cultist mask", 3, "@-Debuff-@")
    AssignLeft(debuffDamageWeapon, 3, "@-Damage-@")
  :?debuffDoTWeapon & isDebuffing(debuffDotThreshold, "dot")
    AssignRight("cultist mask", 3, "@-Debuff-@")
    AssignLeft(debuffDoTWeapon, 3, "@-DoT-@")
  :?debuffChillWeapon & isDebuffing(debuffChillThreshold, "chill")
    AssignRight("cultist mask", 3, "@-Debuff-@")
    AssignLeft(debuffChillWeapon, 3, "@-Chill-" + getFoeDebuffCount("chill") + "-@")
  :?isDebuffing(1, "armor")
    AssignBoth("heavy hammer", 20, "@@@ ARMOR @@@")
    AssignActivate("Hammer")
  :?isDebuffing(debuffFeebleThreshold, "feeble")
    AssignRight("cultist mask", 20, "@@@ ENFEEBLE @@@")
    AssignActivate("Mask")

  ?foe = bronze_guardian
  ^& isInState(33, 30)
  ^& (item.potion = strength | item.potion = berserk)
    activate potion
  :?foe = nagaraja
  ^& isCloseAs("melee")
  ^& item.potion = berserk
    activate potion
  :?foe = bolesh
  ^& isInState(999, 5)
  ^& item.potion = berserk
    activate potion
  :?foe = yeti
  ^& isInState(32, 1)
  ^& item.potion = berserk 
    activate potion

  ?foe = nagaraja
  ^& foe.state > 1
    AssignLeft(getMainWeapon(), 2, "!! Naga Left !!")
    AssignRight(getMainOffhandWeapon(), 2, "!! Naga Right !!")
  :?icePillarWeapon
  ^& foe = ice wall
    AssignLeft(icePillarWeapon, 2.6, "!! Ice Wall !!")
    AssignRight("moondial", 2.6, "!! Ice Wall !!")
  :?stoneHammerA & stoneHammerB
  ^& foe = poena 
    AssignLeft(stoneHammerA, 3.4, "Stun Lock")
    AssignRight(stoneHammerB, 3.4, "Stun Lock")
  :?foe = bolesh
    Set("isDashBlocked", true)
    AssignBoth(getMainRanged(), 3.5, "!! Bolesh !!")
  :?foe = pallas
  ^& foe = phase2
    AssignRight(lifeStealShield, 2, "!! Pallas Right !!")
  :?foe = yeti
  ^& (isInState(133, 0) ! isInState(143, 0))
    AssignBoth(getMainRanged(), 3.5, "!! Yeti Blow !!")
  
  ?item.GetCooldown("mind") <= 0
  ^& (
  ^    foe = bronze_guardian & isInState(32, 10)
  ^  | foe = nagaraja & isInState(112, 53)
  ^  | foe = dysangelos & foe = phase1 & isInState(33, 0)
  ^  | foe = dysangelos & foe = phase3 & isInState(115, 60)
  ^  | foe = pallas & foe = phase1 & isInState(32, 60)
  ^)
    Dodge()

:? isCloseAs("ranged")
    
  ?devourFireRuneThreshold > 0
  ^& summon.GetId() = cinderwisp
  ^& summon.GetVar("ignition") >= devourFireRuneThreshold
  ^& isShortOfBestTimeBy(90)
    activate cinderwisp

  ?Get("skeletonArm") & item.GetCooldown("skeleton_arm") <= 0
    AssignBoth("skeleton", 2, "@-Debuff-PPocket-@")
    ?buffs.string = pick_pocket
    ^& item.CanActivate()
    ^& isCloseAs("close")
    ^& (foe.armor + foe.hp) <= 10
      AssignBoth("skeleton", 3.5, "@@@ PICKPOCKET @@@")
      AssignActivate("Skeleton Arm")

  ?(foe = ice pillar | foe = ice wall) & isCloseAs("ranged") & icePillarWeapon
    AssignLeft(icePillarWeapon, 3, "!! Ice Pillar !!")

  ?item.GetCooldown("mind") <= 0 
  ^& getEndurance() < 0.75
  ^& !get("isSpeedRunning")
  ^& isCloseAs("close")
    Dodge()

  ?foe = acronian
    AssignLeft(getMainWeapon(), 2, "!! Acro Left !!")
    AssignRight(getMainOffhandWeapon(), 2, "!! Acro Right !!")
    ?item.GetCooldown("mind") <= 0
    ^& armor < foe.damage
    ^& isInState(32, 6)
      Dodge()

?canDash()
  AssignRight(canDash(), 3.5, ">> DASH >>")
  
?getEndurance() < 0.25
^& (
^  item.potion = healing
^| item.potion = defensive
^| item.potion = cleansing
^| item.potion = vampiric
^  )
  ?healthHammer
  ^& item.potion = defensive
    ?item.left ! healthHammer
      AssignLeft(healthHammer, 3.4, "Hammer Potion")
    :?maxhp > 50
      activate potion
      AssignLeft("", -1, "")
  :
    activate potion

EquipItems()
ActivateItem()